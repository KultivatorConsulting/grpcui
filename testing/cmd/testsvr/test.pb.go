// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type State int32

const (
	State_INVALID        State = 0
	State_INITIAL        State = 1
	State_PENDING        State = 2
	State_RUNNING        State = 3
	State_PAUSED         State = 4
	State_AWAITING_INPUT State = 5
	State_CANCELLING     State = 6
	State_COMPLETE       State = 7
	State_CANCELLED      State = 8
	State_FAILED         State = 9
)

var State_name = map[int32]string{
	0: "INVALID",
	1: "INITIAL",
	2: "PENDING",
	3: "RUNNING",
	4: "PAUSED",
	5: "AWAITING_INPUT",
	6: "CANCELLING",
	7: "COMPLETE",
	8: "CANCELLED",
	9: "FAILED",
}

var State_value = map[string]int32{
	"INVALID":        0,
	"INITIAL":        1,
	"PENDING":        2,
	"RUNNING":        3,
	"PAUSED":         4,
	"AWAITING_INPUT": 5,
	"CANCELLING":     6,
	"COMPLETE":       7,
	"CANCELLED":      8,
	"FAILED":         9,
}

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (x *State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(State_value, data, "State")
	if err != nil {
		return err
	}
	*x = State(value)
	return nil
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

type Void int32

const (
	Void_VOID Void = 0
)

var Void_name = map[int32]string{
	0: "VOID",
}

var Void_value = map[string]int32{
	"VOID": 0,
}

func (x Void) Enum() *Void {
	p := new(Void)
	*p = x
	return p
}

func (x Void) String() string {
	return proto.EnumName(Void_name, int32(x))
}

func (x *Void) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Void_value, data, "Void")
	if err != nil {
		return err
	}
	*x = Void(value)
	return nil
}

func (Void) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

type Person struct {
	Id      *uint64  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Name    *string  `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Address *Address `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	Xyz     *float64 `protobuf:"fixed64,4,opt,name=xyz,def=3.14159" json:"xyz,omitempty"`
	Title   *string  `protobuf:"bytes,5,opt,name=title,def=overseer" json:"title,omitempty"`
	Labels  []string `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty"`
	IsReal  *bool    `protobuf:"varint,7,opt,name=is_real,json=isReal,def=1" json:"is_real,omitempty"`
	Opaque  []byte   `protobuf:"bytes,8,opt,name=opaque,def=\\001\\002\\003\\004" json:"opaque,omitempty"`
	// Types that are valid to be assigned to Relative:
	//	*Person_Parent
	//	*Person_Sibling
	//	*Person_Child
	//	*Person_None
	Relative             isPerson_Relative `protobuf_oneof:"relative"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Person) Reset()         { *m = Person{} }
func (m *Person) String() string { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()    {}
func (*Person) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *Person) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Person.Unmarshal(m, b)
}
func (m *Person) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Person.Marshal(b, m, deterministic)
}
func (m *Person) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Person.Merge(m, src)
}
func (m *Person) XXX_Size() int {
	return xxx_messageInfo_Person.Size(m)
}
func (m *Person) XXX_DiscardUnknown() {
	xxx_messageInfo_Person.DiscardUnknown(m)
}

var xxx_messageInfo_Person proto.InternalMessageInfo

const Default_Person_Xyz float64 = 3.14159
const Default_Person_Title string = "overseer"
const Default_Person_IsReal bool = true

var Default_Person_Opaque []byte = []byte("\x01\x02\x03\x04")

func (m *Person) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Person) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Person) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Person) GetXyz() float64 {
	if m != nil && m.Xyz != nil {
		return *m.Xyz
	}
	return Default_Person_Xyz
}

func (m *Person) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return Default_Person_Title
}

func (m *Person) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Person) GetIsReal() bool {
	if m != nil && m.IsReal != nil {
		return *m.IsReal
	}
	return Default_Person_IsReal
}

func (m *Person) GetOpaque() []byte {
	if m != nil && m.Opaque != nil {
		return m.Opaque
	}
	return append([]byte(nil), Default_Person_Opaque...)
}

type isPerson_Relative interface {
	isPerson_Relative()
}

type Person_Parent struct {
	Parent *Person `protobuf:"bytes,9,opt,name=parent,oneof"`
}

type Person_Sibling struct {
	Sibling *Person `protobuf:"bytes,10,opt,name=sibling,oneof"`
}

type Person_Child struct {
	Child *Person `protobuf:"bytes,11,opt,name=child,oneof"`
}

type Person_None struct {
	None Void `protobuf:"varint,12,opt,name=none,enum=test.Void,oneof"`
}

func (*Person_Parent) isPerson_Relative() {}

func (*Person_Sibling) isPerson_Relative() {}

func (*Person_Child) isPerson_Relative() {}

func (*Person_None) isPerson_Relative() {}

func (m *Person) GetRelative() isPerson_Relative {
	if m != nil {
		return m.Relative
	}
	return nil
}

func (m *Person) GetParent() *Person {
	if x, ok := m.GetRelative().(*Person_Parent); ok {
		return x.Parent
	}
	return nil
}

func (m *Person) GetSibling() *Person {
	if x, ok := m.GetRelative().(*Person_Sibling); ok {
		return x.Sibling
	}
	return nil
}

func (m *Person) GetChild() *Person {
	if x, ok := m.GetRelative().(*Person_Child); ok {
		return x.Child
	}
	return nil
}

func (m *Person) GetNone() Void {
	if x, ok := m.GetRelative().(*Person_None); ok {
		return x.None
	}
	return Void_VOID
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Person) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Person_Parent)(nil),
		(*Person_Sibling)(nil),
		(*Person_Child)(nil),
		(*Person_None)(nil),
	}
}

type Address struct {
	Line1                *string  `protobuf:"bytes,1,req,name=line1" json:"line1,omitempty"`
	Line2                *string  `protobuf:"bytes,2,opt,name=line2" json:"line2,omitempty"`
	City                 *string  `protobuf:"bytes,3,req,name=city" json:"city,omitempty"`
	State                *string  `protobuf:"bytes,4,req,name=state" json:"state,omitempty"`
	Zip                  *uint32  `protobuf:"varint,5,req,name=zip" json:"zip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetLine1() string {
	if m != nil && m.Line1 != nil {
		return *m.Line1
	}
	return ""
}

func (m *Address) GetLine2() string {
	if m != nil && m.Line2 != nil {
		return *m.Line2
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Address) GetZip() uint32 {
	if m != nil && m.Zip != nil {
		return *m.Zip
	}
	return 0
}

type WellKnowns struct {
	Now                  *timestamp.Timestamp    `protobuf:"bytes,1,req,name=now" json:"now,omitempty"`
	Past                 *timestamp.Timestamp    `protobuf:"bytes,2,opt,name=past" json:"past,omitempty"`
	Futures              []*timestamp.Timestamp  `protobuf:"bytes,3,rep,name=futures" json:"futures,omitempty"`
	Period               *duration.Duration      `protobuf:"bytes,4,req,name=period" json:"period,omitempty"`
	NextInterval         *duration.Duration      `protobuf:"bytes,5,opt,name=next_interval,json=nextInterval" json:"next_interval,omitempty"`
	HistoryIntervals     []*duration.Duration    `protobuf:"bytes,6,rep,name=history_intervals,json=historyIntervals" json:"history_intervals,omitempty"`
	Neat                 *any.Any                `protobuf:"bytes,7,req,name=neat" json:"neat,omitempty"`
	Extra                *any.Any                `protobuf:"bytes,8,opt,name=extra" json:"extra,omitempty"`
	Extensions           []*any.Any              `protobuf:"bytes,9,rep,name=extensions" json:"extensions,omitempty"`
	Object               *_struct.Struct         `protobuf:"bytes,10,req,name=object" json:"object,omitempty"`
	OptionalObject       *_struct.Struct         `protobuf:"bytes,11,opt,name=optional_object,json=optionalObject" json:"optional_object,omitempty"`
	Objects              []*_struct.Struct       `protobuf:"bytes,12,rep,name=objects" json:"objects,omitempty"`
	Value                *_struct.Value          `protobuf:"bytes,13,req,name=value" json:"value,omitempty"`
	OptionalValue        *_struct.Value          `protobuf:"bytes,14,opt,name=optional_value,json=optionalValue" json:"optional_value,omitempty"`
	Values               []*_struct.Value        `protobuf:"bytes,15,rep,name=values" json:"values,omitempty"`
	List                 *_struct.ListValue      `protobuf:"bytes,16,req,name=list" json:"list,omitempty"`
	OptionalList         *_struct.ListValue      `protobuf:"bytes,17,opt,name=optional_list,json=optionalList" json:"optional_list,omitempty"`
	Lists                []*_struct.ListValue    `protobuf:"bytes,18,rep,name=lists" json:"lists,omitempty"`
	Bytes                *wrappers.BytesValue    `protobuf:"bytes,19,req,name=bytes" json:"bytes,omitempty"`
	OptionalBytes        *wrappers.BytesValue    `protobuf:"bytes,20,opt,name=optional_bytes,json=optionalBytes" json:"optional_bytes,omitempty"`
	ListOBytes           []*wrappers.BytesValue  `protobuf:"bytes,21,rep,name=list_o_bytes,json=listOBytes" json:"list_o_bytes,omitempty"`
	String_              *wrappers.StringValue   `protobuf:"bytes,22,req,name=string" json:"string,omitempty"`
	OptionalString       *wrappers.StringValue   `protobuf:"bytes,23,opt,name=optional_string,json=optionalString" json:"optional_string,omitempty"`
	ListOStrings         []*wrappers.StringValue `protobuf:"bytes,24,rep,name=list_o_strings,json=listOStrings" json:"list_o_strings,omitempty"`
	Bool                 *wrappers.BoolValue     `protobuf:"bytes,25,req,name=bool" json:"bool,omitempty"`
	OptionalBool         *wrappers.BoolValue     `protobuf:"bytes,26,opt,name=optional_bool,json=optionalBool" json:"optional_bool,omitempty"`
	ListOBools           []*wrappers.BoolValue   `protobuf:"bytes,27,rep,name=list_o_bools,json=listOBools" json:"list_o_bools,omitempty"`
	Double               *wrappers.DoubleValue   `protobuf:"bytes,28,req,name=double" json:"double,omitempty"`
	OptionalDouble       *wrappers.DoubleValue   `protobuf:"bytes,29,opt,name=optional_double,json=optionalDouble" json:"optional_double,omitempty"`
	ListODoubles         []*wrappers.DoubleValue `protobuf:"bytes,30,rep,name=list_o_doubles,json=listODoubles" json:"list_o_doubles,omitempty"`
	Float                *wrappers.FloatValue    `protobuf:"bytes,31,req,name=float" json:"float,omitempty"`
	OptionalFloat        *wrappers.FloatValue    `protobuf:"bytes,32,opt,name=optional_float,json=optionalFloat" json:"optional_float,omitempty"`
	ListOFloats          []*wrappers.FloatValue  `protobuf:"bytes,33,rep,name=list_o_floats,json=listOFloats" json:"list_o_floats,omitempty"`
	SmallInt             *wrappers.Int32Value    `protobuf:"bytes,34,req,name=small_int,json=smallInt" json:"small_int,omitempty"`
	OptionalSmallInt     *wrappers.Int32Value    `protobuf:"bytes,35,opt,name=optional_small_int,json=optionalSmallInt" json:"optional_small_int,omitempty"`
	ListOSmallInts       []*wrappers.Int32Value  `protobuf:"bytes,36,rep,name=list_o_small_ints,json=listOSmallInts" json:"list_o_small_ints,omitempty"`
	BigInt               *wrappers.Int64Value    `protobuf:"bytes,37,req,name=big_int,json=bigInt" json:"big_int,omitempty"`
	OptionalBigInt       *wrappers.Int64Value    `protobuf:"bytes,38,opt,name=optional_big_int,json=optionalBigInt" json:"optional_big_int,omitempty"`
	ListOBigInts         []*wrappers.Int64Value  `protobuf:"bytes,39,rep,name=list_o_big_ints,json=listOBigInts" json:"list_o_big_ints,omitempty"`
	SmallId              *wrappers.UInt32Value   `protobuf:"bytes,40,req,name=small_id,json=smallId" json:"small_id,omitempty"`
	OptionalSmallId      *wrappers.UInt32Value   `protobuf:"bytes,41,opt,name=optional_small_id,json=optionalSmallId" json:"optional_small_id,omitempty"`
	ListOSmallIds        []*wrappers.UInt32Value `protobuf:"bytes,42,rep,name=list_o_small_ids,json=listOSmallIds" json:"list_o_small_ids,omitempty"`
	BigId                *wrappers.UInt64Value   `protobuf:"bytes,43,req,name=big_id,json=bigId" json:"big_id,omitempty"`
	OptionalBigId        *wrappers.UInt64Value   `protobuf:"bytes,44,opt,name=optional_big_id,json=optionalBigId" json:"optional_big_id,omitempty"`
	ListOBigIds          []*wrappers.UInt64Value `protobuf:"bytes,45,rep,name=list_o_big_ids,json=listOBigIds" json:"list_o_big_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *WellKnowns) Reset()         { *m = WellKnowns{} }
func (m *WellKnowns) String() string { return proto.CompactTextString(m) }
func (*WellKnowns) ProtoMessage()    {}
func (*WellKnowns) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{2}
}

func (m *WellKnowns) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WellKnowns.Unmarshal(m, b)
}
func (m *WellKnowns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WellKnowns.Marshal(b, m, deterministic)
}
func (m *WellKnowns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WellKnowns.Merge(m, src)
}
func (m *WellKnowns) XXX_Size() int {
	return xxx_messageInfo_WellKnowns.Size(m)
}
func (m *WellKnowns) XXX_DiscardUnknown() {
	xxx_messageInfo_WellKnowns.DiscardUnknown(m)
}

var xxx_messageInfo_WellKnowns proto.InternalMessageInfo

func (m *WellKnowns) GetNow() *timestamp.Timestamp {
	if m != nil {
		return m.Now
	}
	return nil
}

func (m *WellKnowns) GetPast() *timestamp.Timestamp {
	if m != nil {
		return m.Past
	}
	return nil
}

func (m *WellKnowns) GetFutures() []*timestamp.Timestamp {
	if m != nil {
		return m.Futures
	}
	return nil
}

func (m *WellKnowns) GetPeriod() *duration.Duration {
	if m != nil {
		return m.Period
	}
	return nil
}

func (m *WellKnowns) GetNextInterval() *duration.Duration {
	if m != nil {
		return m.NextInterval
	}
	return nil
}

func (m *WellKnowns) GetHistoryIntervals() []*duration.Duration {
	if m != nil {
		return m.HistoryIntervals
	}
	return nil
}

func (m *WellKnowns) GetNeat() *any.Any {
	if m != nil {
		return m.Neat
	}
	return nil
}

func (m *WellKnowns) GetExtra() *any.Any {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *WellKnowns) GetExtensions() []*any.Any {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *WellKnowns) GetObject() *_struct.Struct {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *WellKnowns) GetOptionalObject() *_struct.Struct {
	if m != nil {
		return m.OptionalObject
	}
	return nil
}

func (m *WellKnowns) GetObjects() []*_struct.Struct {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *WellKnowns) GetValue() *_struct.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *WellKnowns) GetOptionalValue() *_struct.Value {
	if m != nil {
		return m.OptionalValue
	}
	return nil
}

func (m *WellKnowns) GetValues() []*_struct.Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *WellKnowns) GetList() *_struct.ListValue {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *WellKnowns) GetOptionalList() *_struct.ListValue {
	if m != nil {
		return m.OptionalList
	}
	return nil
}

func (m *WellKnowns) GetLists() []*_struct.ListValue {
	if m != nil {
		return m.Lists
	}
	return nil
}

func (m *WellKnowns) GetBytes() *wrappers.BytesValue {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *WellKnowns) GetOptionalBytes() *wrappers.BytesValue {
	if m != nil {
		return m.OptionalBytes
	}
	return nil
}

func (m *WellKnowns) GetListOBytes() []*wrappers.BytesValue {
	if m != nil {
		return m.ListOBytes
	}
	return nil
}

func (m *WellKnowns) GetString_() *wrappers.StringValue {
	if m != nil {
		return m.String_
	}
	return nil
}

func (m *WellKnowns) GetOptionalString() *wrappers.StringValue {
	if m != nil {
		return m.OptionalString
	}
	return nil
}

func (m *WellKnowns) GetListOStrings() []*wrappers.StringValue {
	if m != nil {
		return m.ListOStrings
	}
	return nil
}

func (m *WellKnowns) GetBool() *wrappers.BoolValue {
	if m != nil {
		return m.Bool
	}
	return nil
}

func (m *WellKnowns) GetOptionalBool() *wrappers.BoolValue {
	if m != nil {
		return m.OptionalBool
	}
	return nil
}

func (m *WellKnowns) GetListOBools() []*wrappers.BoolValue {
	if m != nil {
		return m.ListOBools
	}
	return nil
}

func (m *WellKnowns) GetDouble() *wrappers.DoubleValue {
	if m != nil {
		return m.Double
	}
	return nil
}

func (m *WellKnowns) GetOptionalDouble() *wrappers.DoubleValue {
	if m != nil {
		return m.OptionalDouble
	}
	return nil
}

func (m *WellKnowns) GetListODoubles() []*wrappers.DoubleValue {
	if m != nil {
		return m.ListODoubles
	}
	return nil
}

func (m *WellKnowns) GetFloat() *wrappers.FloatValue {
	if m != nil {
		return m.Float
	}
	return nil
}

func (m *WellKnowns) GetOptionalFloat() *wrappers.FloatValue {
	if m != nil {
		return m.OptionalFloat
	}
	return nil
}

func (m *WellKnowns) GetListOFloats() []*wrappers.FloatValue {
	if m != nil {
		return m.ListOFloats
	}
	return nil
}

func (m *WellKnowns) GetSmallInt() *wrappers.Int32Value {
	if m != nil {
		return m.SmallInt
	}
	return nil
}

func (m *WellKnowns) GetOptionalSmallInt() *wrappers.Int32Value {
	if m != nil {
		return m.OptionalSmallInt
	}
	return nil
}

func (m *WellKnowns) GetListOSmallInts() []*wrappers.Int32Value {
	if m != nil {
		return m.ListOSmallInts
	}
	return nil
}

func (m *WellKnowns) GetBigInt() *wrappers.Int64Value {
	if m != nil {
		return m.BigInt
	}
	return nil
}

func (m *WellKnowns) GetOptionalBigInt() *wrappers.Int64Value {
	if m != nil {
		return m.OptionalBigInt
	}
	return nil
}

func (m *WellKnowns) GetListOBigInts() []*wrappers.Int64Value {
	if m != nil {
		return m.ListOBigInts
	}
	return nil
}

func (m *WellKnowns) GetSmallId() *wrappers.UInt32Value {
	if m != nil {
		return m.SmallId
	}
	return nil
}

func (m *WellKnowns) GetOptionalSmallId() *wrappers.UInt32Value {
	if m != nil {
		return m.OptionalSmallId
	}
	return nil
}

func (m *WellKnowns) GetListOSmallIds() []*wrappers.UInt32Value {
	if m != nil {
		return m.ListOSmallIds
	}
	return nil
}

func (m *WellKnowns) GetBigId() *wrappers.UInt64Value {
	if m != nil {
		return m.BigId
	}
	return nil
}

func (m *WellKnowns) GetOptionalBigId() *wrappers.UInt64Value {
	if m != nil {
		return m.OptionalBigId
	}
	return nil
}

func (m *WellKnowns) GetListOBigIds() []*wrappers.UInt64Value {
	if m != nil {
		return m.ListOBigIds
	}
	return nil
}

type NumbersNumbersNumbers struct {
	Usually_1            *int32   `protobuf:"varint,1,opt,name=usually_1,json=usually1,def=1" json:"usually_1,omitempty"`
	SomeNum_1            *int32   `protobuf:"varint,2,opt,name=some_num_1,json=someNum1" json:"some_num_1,omitempty"`
	NeededNum_1          *int32   `protobuf:"varint,3,req,name=needed_num_1,json=neededNum1" json:"needed_num_1,omitempty"`
	Usually_2            *int64   `protobuf:"varint,4,opt,name=usually_2,json=usually2,def=2" json:"usually_2,omitempty"`
	SomeNum_2            *int64   `protobuf:"varint,5,opt,name=some_num_2,json=someNum2" json:"some_num_2,omitempty"`
	NeededNum_2          *int64   `protobuf:"varint,6,req,name=needed_num_2,json=neededNum2" json:"needed_num_2,omitempty"`
	Usually_3            *uint32  `protobuf:"varint,7,opt,name=usually_3,json=usually3,def=3" json:"usually_3,omitempty"`
	SomeNum_3            *uint32  `protobuf:"varint,8,opt,name=some_num_3,json=someNum3" json:"some_num_3,omitempty"`
	NeededNum_3          *uint32  `protobuf:"varint,9,req,name=needed_num_3,json=neededNum3" json:"needed_num_3,omitempty"`
	Usually_4            *uint64  `protobuf:"varint,10,opt,name=usually_4,json=usually4,def=4" json:"usually_4,omitempty"`
	SomeNum_4            *uint64  `protobuf:"varint,11,opt,name=some_num_4,json=someNum4" json:"some_num_4,omitempty"`
	NeededNum_4          *uint64  `protobuf:"varint,12,req,name=needed_num_4,json=neededNum4" json:"needed_num_4,omitempty"`
	Usually_5            *int32   `protobuf:"zigzag32,13,opt,name=usually_5,json=usually5,def=5" json:"usually_5,omitempty"`
	SomeNum_5            *int32   `protobuf:"zigzag32,14,opt,name=some_num_5,json=someNum5" json:"some_num_5,omitempty"`
	NeededNum_5          *int32   `protobuf:"zigzag32,15,req,name=needed_num_5,json=neededNum5" json:"needed_num_5,omitempty"`
	Usually_6            *int64   `protobuf:"zigzag64,16,opt,name=usually_6,json=usually6,def=6" json:"usually_6,omitempty"`
	SomeNum_6            *int64   `protobuf:"zigzag64,17,opt,name=some_num_6,json=someNum6" json:"some_num_6,omitempty"`
	NeededNum_6          *int64   `protobuf:"zigzag64,18,req,name=needed_num_6,json=neededNum6" json:"needed_num_6,omitempty"`
	Usually_7            *uint32  `protobuf:"fixed32,19,opt,name=usually_7,json=usually7,def=7" json:"usually_7,omitempty"`
	SomeNum_7            *uint32  `protobuf:"fixed32,20,opt,name=some_num_7,json=someNum7" json:"some_num_7,omitempty"`
	NeededNum_7          *uint32  `protobuf:"fixed32,21,req,name=needed_num_7,json=neededNum7" json:"needed_num_7,omitempty"`
	Usually_8            *uint64  `protobuf:"fixed64,22,opt,name=usually_8,json=usually8,def=8" json:"usually_8,omitempty"`
	SomeNum_8            *uint64  `protobuf:"fixed64,23,opt,name=some_num_8,json=someNum8" json:"some_num_8,omitempty"`
	NeededNum_8          *uint64  `protobuf:"fixed64,24,req,name=needed_num_8,json=neededNum8" json:"needed_num_8,omitempty"`
	Usually_9            *int32   `protobuf:"fixed32,25,opt,name=usually_9,json=usually9,def=9" json:"usually_9,omitempty"`
	SomeNum_9            *int32   `protobuf:"fixed32,26,opt,name=some_num_9,json=someNum9" json:"some_num_9,omitempty"`
	NeededNum_9          *int32   `protobuf:"fixed32,27,req,name=needed_num_9,json=neededNum9" json:"needed_num_9,omitempty"`
	Usually_10           *int64   `protobuf:"fixed64,28,opt,name=usually_10,json=usually10,def=10" json:"usually_10,omitempty"`
	SomeNum_10           *int64   `protobuf:"fixed64,29,opt,name=some_num_10,json=someNum10" json:"some_num_10,omitempty"`
	NeededNum_10         *int64   `protobuf:"fixed64,30,req,name=needed_num_10,json=neededNum10" json:"needed_num_10,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumbersNumbersNumbers) Reset()         { *m = NumbersNumbersNumbers{} }
func (m *NumbersNumbersNumbers) String() string { return proto.CompactTextString(m) }
func (*NumbersNumbersNumbers) ProtoMessage()    {}
func (*NumbersNumbersNumbers) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{3}
}

func (m *NumbersNumbersNumbers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumbersNumbersNumbers.Unmarshal(m, b)
}
func (m *NumbersNumbersNumbers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumbersNumbersNumbers.Marshal(b, m, deterministic)
}
func (m *NumbersNumbersNumbers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumbersNumbersNumbers.Merge(m, src)
}
func (m *NumbersNumbersNumbers) XXX_Size() int {
	return xxx_messageInfo_NumbersNumbersNumbers.Size(m)
}
func (m *NumbersNumbersNumbers) XXX_DiscardUnknown() {
	xxx_messageInfo_NumbersNumbersNumbers.DiscardUnknown(m)
}

var xxx_messageInfo_NumbersNumbersNumbers proto.InternalMessageInfo

const Default_NumbersNumbersNumbers_Usually_1 int32 = 1
const Default_NumbersNumbersNumbers_Usually_2 int64 = 2
const Default_NumbersNumbersNumbers_Usually_3 uint32 = 3
const Default_NumbersNumbersNumbers_Usually_4 uint64 = 4
const Default_NumbersNumbersNumbers_Usually_5 int32 = 5
const Default_NumbersNumbersNumbers_Usually_6 int64 = 6
const Default_NumbersNumbersNumbers_Usually_7 uint32 = 7
const Default_NumbersNumbersNumbers_Usually_8 uint64 = 8
const Default_NumbersNumbersNumbers_Usually_9 int32 = 9
const Default_NumbersNumbersNumbers_Usually_10 int64 = 10

func (m *NumbersNumbersNumbers) GetUsually_1() int32 {
	if m != nil && m.Usually_1 != nil {
		return *m.Usually_1
	}
	return Default_NumbersNumbersNumbers_Usually_1
}

func (m *NumbersNumbersNumbers) GetSomeNum_1() int32 {
	if m != nil && m.SomeNum_1 != nil {
		return *m.SomeNum_1
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetNeededNum_1() int32 {
	if m != nil && m.NeededNum_1 != nil {
		return *m.NeededNum_1
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetUsually_2() int64 {
	if m != nil && m.Usually_2 != nil {
		return *m.Usually_2
	}
	return Default_NumbersNumbersNumbers_Usually_2
}

func (m *NumbersNumbersNumbers) GetSomeNum_2() int64 {
	if m != nil && m.SomeNum_2 != nil {
		return *m.SomeNum_2
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetNeededNum_2() int64 {
	if m != nil && m.NeededNum_2 != nil {
		return *m.NeededNum_2
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetUsually_3() uint32 {
	if m != nil && m.Usually_3 != nil {
		return *m.Usually_3
	}
	return Default_NumbersNumbersNumbers_Usually_3
}

func (m *NumbersNumbersNumbers) GetSomeNum_3() uint32 {
	if m != nil && m.SomeNum_3 != nil {
		return *m.SomeNum_3
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetNeededNum_3() uint32 {
	if m != nil && m.NeededNum_3 != nil {
		return *m.NeededNum_3
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetUsually_4() uint64 {
	if m != nil && m.Usually_4 != nil {
		return *m.Usually_4
	}
	return Default_NumbersNumbersNumbers_Usually_4
}

func (m *NumbersNumbersNumbers) GetSomeNum_4() uint64 {
	if m != nil && m.SomeNum_4 != nil {
		return *m.SomeNum_4
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetNeededNum_4() uint64 {
	if m != nil && m.NeededNum_4 != nil {
		return *m.NeededNum_4
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetUsually_5() int32 {
	if m != nil && m.Usually_5 != nil {
		return *m.Usually_5
	}
	return Default_NumbersNumbersNumbers_Usually_5
}

func (m *NumbersNumbersNumbers) GetSomeNum_5() int32 {
	if m != nil && m.SomeNum_5 != nil {
		return *m.SomeNum_5
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetNeededNum_5() int32 {
	if m != nil && m.NeededNum_5 != nil {
		return *m.NeededNum_5
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetUsually_6() int64 {
	if m != nil && m.Usually_6 != nil {
		return *m.Usually_6
	}
	return Default_NumbersNumbersNumbers_Usually_6
}

func (m *NumbersNumbersNumbers) GetSomeNum_6() int64 {
	if m != nil && m.SomeNum_6 != nil {
		return *m.SomeNum_6
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetNeededNum_6() int64 {
	if m != nil && m.NeededNum_6 != nil {
		return *m.NeededNum_6
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetUsually_7() uint32 {
	if m != nil && m.Usually_7 != nil {
		return *m.Usually_7
	}
	return Default_NumbersNumbersNumbers_Usually_7
}

func (m *NumbersNumbersNumbers) GetSomeNum_7() uint32 {
	if m != nil && m.SomeNum_7 != nil {
		return *m.SomeNum_7
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetNeededNum_7() uint32 {
	if m != nil && m.NeededNum_7 != nil {
		return *m.NeededNum_7
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetUsually_8() uint64 {
	if m != nil && m.Usually_8 != nil {
		return *m.Usually_8
	}
	return Default_NumbersNumbersNumbers_Usually_8
}

func (m *NumbersNumbersNumbers) GetSomeNum_8() uint64 {
	if m != nil && m.SomeNum_8 != nil {
		return *m.SomeNum_8
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetNeededNum_8() uint64 {
	if m != nil && m.NeededNum_8 != nil {
		return *m.NeededNum_8
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetUsually_9() int32 {
	if m != nil && m.Usually_9 != nil {
		return *m.Usually_9
	}
	return Default_NumbersNumbersNumbers_Usually_9
}

func (m *NumbersNumbersNumbers) GetSomeNum_9() int32 {
	if m != nil && m.SomeNum_9 != nil {
		return *m.SomeNum_9
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetNeededNum_9() int32 {
	if m != nil && m.NeededNum_9 != nil {
		return *m.NeededNum_9
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetUsually_10() int64 {
	if m != nil && m.Usually_10 != nil {
		return *m.Usually_10
	}
	return Default_NumbersNumbersNumbers_Usually_10
}

func (m *NumbersNumbersNumbers) GetSomeNum_10() int64 {
	if m != nil && m.SomeNum_10 != nil {
		return *m.SomeNum_10
	}
	return 0
}

func (m *NumbersNumbersNumbers) GetNeededNum_10() int64 {
	if m != nil && m.NeededNum_10 != nil {
		return *m.NeededNum_10
	}
	return 0
}

type Arrays struct {
	Names                []string  `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	Data                 [][]byte  `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	Relatives            []*Person `protobuf:"bytes,3,rep,name=relatives" json:"relatives,omitempty"`
	OtherStates          []State   `protobuf:"varint,14,rep,name=other_states,json=otherStates,enum=test.State" json:"other_states,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Arrays) Reset()         { *m = Arrays{} }
func (m *Arrays) String() string { return proto.CompactTextString(m) }
func (*Arrays) ProtoMessage()    {}
func (*Arrays) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{4}
}

func (m *Arrays) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Arrays.Unmarshal(m, b)
}
func (m *Arrays) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Arrays.Marshal(b, m, deterministic)
}
func (m *Arrays) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arrays.Merge(m, src)
}
func (m *Arrays) XXX_Size() int {
	return xxx_messageInfo_Arrays.Size(m)
}
func (m *Arrays) XXX_DiscardUnknown() {
	xxx_messageInfo_Arrays.DiscardUnknown(m)
}

var xxx_messageInfo_Arrays proto.InternalMessageInfo

func (m *Arrays) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *Arrays) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Arrays) GetRelatives() []*Person {
	if m != nil {
		return m.Relatives
	}
	return nil
}

func (m *Arrays) GetOtherStates() []State {
	if m != nil {
		return m.OtherStates
	}
	return nil
}

type Maps struct {
	StringSet            map[string]Void         `protobuf:"bytes,1,rep,name=string_set,json=stringSet" json:"string_set,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Int32Set             map[int32]Void          `protobuf:"bytes,2,rep,name=int32_set,json=int32Set" json:"int32_set,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Int64Set             map[int64]Void          `protobuf:"bytes,3,rep,name=int64_set,json=int64Set" json:"int64_set,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Uint32Set            map[uint32]Void         `protobuf:"bytes,4,rep,name=uint32_set,json=uint32Set" json:"uint32_set,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Uint64Set            map[uint64]Void         `protobuf:"bytes,5,rep,name=uint64_set,json=uint64Set" json:"uint64_set,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Sint32Set            map[int32]Void          `protobuf:"bytes,6,rep,name=sint32_set,json=sint32Set" json:"sint32_set,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Sint64Set            map[int64]Void          `protobuf:"bytes,7,rep,name=sint64_set,json=sint64Set" json:"sint64_set,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	BoolSet              map[bool]Void           `protobuf:"bytes,8,rep,name=bool_set,json=boolSet" json:"bool_set,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Fixed32Set           map[uint32]*empty.Empty `protobuf:"bytes,9,rep,name=fixed32_set,json=fixed32Set" json:"fixed32_set,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Fixed64Set           map[uint64]*empty.Empty `protobuf:"bytes,10,rep,name=fixed64_set,json=fixed64Set" json:"fixed64_set,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sfixed32Set          map[int32]*empty.Empty  `protobuf:"bytes,11,rep,name=sfixed32_set,json=sfixed32Set" json:"sfixed32_set,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sfixed64Set          map[int64]*empty.Empty  `protobuf:"bytes,12,rep,name=sfixed64_set,json=sfixed64Set" json:"sfixed64_set,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PeopleByEmployeeNum  map[int32]*Person       `protobuf:"bytes,13,rep,name=people_by_employee_num,json=peopleByEmployeeNum" json:"people_by_employee_num,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	States               map[int32]State         `protobuf:"bytes,14,rep,name=states" json:"states,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.State"`
	ArraysByKind         map[string]*Arrays      `protobuf:"bytes,15,rep,name=arrays_by_kind,json=arraysByKind" json:"arrays_by_kind,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringNames          map[string]string       `protobuf:"bytes,16,rep,name=string_names,json=stringNames" json:"string_names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BytesNames           map[string][]byte       `protobuf:"bytes,17,rep,name=bytes_names,json=bytesNames" json:"bytes_names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BoolNames            map[string]bool         `protobuf:"bytes,18,rep,name=bool_names,json=boolNames" json:"bool_names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	DoubleNames          map[string]float64      `protobuf:"bytes,19,rep,name=double_names,json=doubleNames" json:"double_names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	FloatNames           map[string]float32      `protobuf:"bytes,20,rep,name=float_names,json=floatNames" json:"float_names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Maps) Reset()         { *m = Maps{} }
func (m *Maps) String() string { return proto.CompactTextString(m) }
func (*Maps) ProtoMessage()    {}
func (*Maps) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{5}
}

func (m *Maps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Maps.Unmarshal(m, b)
}
func (m *Maps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Maps.Marshal(b, m, deterministic)
}
func (m *Maps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Maps.Merge(m, src)
}
func (m *Maps) XXX_Size() int {
	return xxx_messageInfo_Maps.Size(m)
}
func (m *Maps) XXX_DiscardUnknown() {
	xxx_messageInfo_Maps.DiscardUnknown(m)
}

var xxx_messageInfo_Maps proto.InternalMessageInfo

func (m *Maps) GetStringSet() map[string]Void {
	if m != nil {
		return m.StringSet
	}
	return nil
}

func (m *Maps) GetInt32Set() map[int32]Void {
	if m != nil {
		return m.Int32Set
	}
	return nil
}

func (m *Maps) GetInt64Set() map[int64]Void {
	if m != nil {
		return m.Int64Set
	}
	return nil
}

func (m *Maps) GetUint32Set() map[uint32]Void {
	if m != nil {
		return m.Uint32Set
	}
	return nil
}

func (m *Maps) GetUint64Set() map[uint64]Void {
	if m != nil {
		return m.Uint64Set
	}
	return nil
}

func (m *Maps) GetSint32Set() map[int32]Void {
	if m != nil {
		return m.Sint32Set
	}
	return nil
}

func (m *Maps) GetSint64Set() map[int64]Void {
	if m != nil {
		return m.Sint64Set
	}
	return nil
}

func (m *Maps) GetBoolSet() map[bool]Void {
	if m != nil {
		return m.BoolSet
	}
	return nil
}

func (m *Maps) GetFixed32Set() map[uint32]*empty.Empty {
	if m != nil {
		return m.Fixed32Set
	}
	return nil
}

func (m *Maps) GetFixed64Set() map[uint64]*empty.Empty {
	if m != nil {
		return m.Fixed64Set
	}
	return nil
}

func (m *Maps) GetSfixed32Set() map[int32]*empty.Empty {
	if m != nil {
		return m.Sfixed32Set
	}
	return nil
}

func (m *Maps) GetSfixed64Set() map[int64]*empty.Empty {
	if m != nil {
		return m.Sfixed64Set
	}
	return nil
}

func (m *Maps) GetPeopleByEmployeeNum() map[int32]*Person {
	if m != nil {
		return m.PeopleByEmployeeNum
	}
	return nil
}

func (m *Maps) GetStates() map[int32]State {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *Maps) GetArraysByKind() map[string]*Arrays {
	if m != nil {
		return m.ArraysByKind
	}
	return nil
}

func (m *Maps) GetStringNames() map[string]string {
	if m != nil {
		return m.StringNames
	}
	return nil
}

func (m *Maps) GetBytesNames() map[string][]byte {
	if m != nil {
		return m.BytesNames
	}
	return nil
}

func (m *Maps) GetBoolNames() map[string]bool {
	if m != nil {
		return m.BoolNames
	}
	return nil
}

func (m *Maps) GetDoubleNames() map[string]float64 {
	if m != nil {
		return m.DoubleNames
	}
	return nil
}

func (m *Maps) GetFloatNames() map[string]float32 {
	if m != nil {
		return m.FloatNames
	}
	return nil
}

type TestMessage struct {
	Recurse              *TestMessage           `protobuf:"bytes,2,opt,name=recurse" json:"recurse,omitempty"`
	RepeatedRecurse      []*TestMessage         `protobuf:"bytes,3,rep,name=repeated_recurse,json=repeatedRecurse" json:"repeated_recurse,omitempty"`
	Person               *Person                `protobuf:"bytes,4,req,name=person" json:"person,omitempty"`
	State                *State                 `protobuf:"varint,5,req,name=state,enum=test.State" json:"state,omitempty"`
	Numbers              *NumbersNumbersNumbers `protobuf:"bytes,6,opt,name=numbers" json:"numbers,omitempty"`
	Usually_4242         *float32               `protobuf:"fixed32,7,opt,name=usually_4242,json=usually4242,def=4242" json:"usually_4242,omitempty"`
	SomeNumA             *float32               `protobuf:"fixed32,8,opt,name=some_num_a,json=someNumA" json:"some_num_a,omitempty"`
	NeededNumA           *float32               `protobuf:"fixed32,9,req,name=needed_num_a,json=neededNumA" json:"needed_num_a,omitempty"`
	Usually_9999         *float64               `protobuf:"fixed64,10,opt,name=usually_9999,json=usually9999,def=9999" json:"usually_9999,omitempty"`
	SomeNumB             *float64               `protobuf:"fixed64,11,opt,name=some_num_b,json=someNumB" json:"some_num_b,omitempty"`
	NeededNumB           *float64               `protobuf:"fixed64,12,req,name=needed_num_b,json=neededNumB" json:"needed_num_b,omitempty"`
	NextState            *State                 `protobuf:"varint,13,opt,name=next_state,json=nextState,enum=test.State,def=2" json:"next_state,omitempty"`
	Base64Stuff          []byte                 `protobuf:"bytes,14,opt,name=base64_stuff,json=base64Stuff" json:"base64_stuff,omitempty"`
	OpaqueId             []byte                 `protobuf:"bytes,15,req,name=opaque_id,json=opaqueId" json:"opaque_id,omitempty"`
	Wk                   *WellKnowns            `protobuf:"bytes,16,opt,name=wk" json:"wk,omitempty"`
	Arrays               *Arrays                `protobuf:"bytes,17,opt,name=arrays" json:"arrays,omitempty"`
	Maps                 *Maps                  `protobuf:"bytes,18,opt,name=maps" json:"maps,omitempty"`
	Misc                 *TestMessage_Misc      `protobuf:"group,19,opt,name=Misc,json=misc" json:"misc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TestMessage) Reset()         { *m = TestMessage{} }
func (m *TestMessage) String() string { return proto.CompactTextString(m) }
func (*TestMessage) ProtoMessage()    {}
func (*TestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{6}
}

func (m *TestMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestMessage.Unmarshal(m, b)
}
func (m *TestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestMessage.Marshal(b, m, deterministic)
}
func (m *TestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMessage.Merge(m, src)
}
func (m *TestMessage) XXX_Size() int {
	return xxx_messageInfo_TestMessage.Size(m)
}
func (m *TestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestMessage proto.InternalMessageInfo

const Default_TestMessage_Usually_4242 float32 = 4242
const Default_TestMessage_Usually_9999 float64 = 9999
const Default_TestMessage_NextState State = State_PENDING

func (m *TestMessage) GetRecurse() *TestMessage {
	if m != nil {
		return m.Recurse
	}
	return nil
}

func (m *TestMessage) GetRepeatedRecurse() []*TestMessage {
	if m != nil {
		return m.RepeatedRecurse
	}
	return nil
}

func (m *TestMessage) GetPerson() *Person {
	if m != nil {
		return m.Person
	}
	return nil
}

func (m *TestMessage) GetState() State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return State_INVALID
}

func (m *TestMessage) GetNumbers() *NumbersNumbersNumbers {
	if m != nil {
		return m.Numbers
	}
	return nil
}

func (m *TestMessage) GetUsually_4242() float32 {
	if m != nil && m.Usually_4242 != nil {
		return *m.Usually_4242
	}
	return Default_TestMessage_Usually_4242
}

func (m *TestMessage) GetSomeNumA() float32 {
	if m != nil && m.SomeNumA != nil {
		return *m.SomeNumA
	}
	return 0
}

func (m *TestMessage) GetNeededNumA() float32 {
	if m != nil && m.NeededNumA != nil {
		return *m.NeededNumA
	}
	return 0
}

func (m *TestMessage) GetUsually_9999() float64 {
	if m != nil && m.Usually_9999 != nil {
		return *m.Usually_9999
	}
	return Default_TestMessage_Usually_9999
}

func (m *TestMessage) GetSomeNumB() float64 {
	if m != nil && m.SomeNumB != nil {
		return *m.SomeNumB
	}
	return 0
}

func (m *TestMessage) GetNeededNumB() float64 {
	if m != nil && m.NeededNumB != nil {
		return *m.NeededNumB
	}
	return 0
}

func (m *TestMessage) GetNextState() State {
	if m != nil && m.NextState != nil {
		return *m.NextState
	}
	return Default_TestMessage_NextState
}

func (m *TestMessage) GetBase64Stuff() []byte {
	if m != nil {
		return m.Base64Stuff
	}
	return nil
}

func (m *TestMessage) GetOpaqueId() []byte {
	if m != nil {
		return m.OpaqueId
	}
	return nil
}

func (m *TestMessage) GetWk() *WellKnowns {
	if m != nil {
		return m.Wk
	}
	return nil
}

func (m *TestMessage) GetArrays() *Arrays {
	if m != nil {
		return m.Arrays
	}
	return nil
}

func (m *TestMessage) GetMaps() *Maps {
	if m != nil {
		return m.Maps
	}
	return nil
}

func (m *TestMessage) GetMisc() *TestMessage_Misc {
	if m != nil {
		return m.Misc
	}
	return nil
}

type TestMessage_Misc struct {
	Foo                  *string  `protobuf:"bytes,1,opt,name=foo" json:"foo,omitempty"`
	Bar                  *int32   `protobuf:"varint,2,opt,name=bar" json:"bar,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestMessage_Misc) Reset()         { *m = TestMessage_Misc{} }
func (m *TestMessage_Misc) String() string { return proto.CompactTextString(m) }
func (*TestMessage_Misc) ProtoMessage()    {}
func (*TestMessage_Misc) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{6, 0}
}

func (m *TestMessage_Misc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestMessage_Misc.Unmarshal(m, b)
}
func (m *TestMessage_Misc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestMessage_Misc.Marshal(b, m, deterministic)
}
func (m *TestMessage_Misc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMessage_Misc.Merge(m, src)
}
func (m *TestMessage_Misc) XXX_Size() int {
	return xxx_messageInfo_TestMessage_Misc.Size(m)
}
func (m *TestMessage_Misc) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMessage_Misc.DiscardUnknown(m)
}

var xxx_messageInfo_TestMessage_Misc proto.InternalMessageInfo

func (m *TestMessage_Misc) GetFoo() string {
	if m != nil && m.Foo != nil {
		return *m.Foo
	}
	return ""
}

func (m *TestMessage_Misc) GetBar() int32 {
	if m != nil && m.Bar != nil {
		return *m.Bar
	}
	return 0
}

func init() {
	proto.RegisterEnum("test.State", State_name, State_value)
	proto.RegisterEnum("test.Void", Void_name, Void_value)
	proto.RegisterType((*Person)(nil), "test.Person")
	proto.RegisterType((*Address)(nil), "test.Address")
	proto.RegisterType((*WellKnowns)(nil), "test.WellKnowns")
	proto.RegisterType((*NumbersNumbersNumbers)(nil), "test.NumbersNumbersNumbers")
	proto.RegisterType((*Arrays)(nil), "test.Arrays")
	proto.RegisterType((*Maps)(nil), "test.Maps")
	proto.RegisterMapType((map[string]*Arrays)(nil), "test.Maps.ArraysByKindEntry")
	proto.RegisterMapType((map[string]bool)(nil), "test.Maps.BoolNamesEntry")
	proto.RegisterMapType((map[bool]Void)(nil), "test.Maps.BoolSetEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "test.Maps.BytesNamesEntry")
	proto.RegisterMapType((map[string]float64)(nil), "test.Maps.DoubleNamesEntry")
	proto.RegisterMapType((map[uint32]*empty.Empty)(nil), "test.Maps.Fixed32SetEntry")
	proto.RegisterMapType((map[uint64]*empty.Empty)(nil), "test.Maps.Fixed64SetEntry")
	proto.RegisterMapType((map[string]float32)(nil), "test.Maps.FloatNamesEntry")
	proto.RegisterMapType((map[int32]Void)(nil), "test.Maps.Int32SetEntry")
	proto.RegisterMapType((map[int64]Void)(nil), "test.Maps.Int64SetEntry")
	proto.RegisterMapType((map[int32]*Person)(nil), "test.Maps.PeopleByEmployeeNumEntry")
	proto.RegisterMapType((map[int32]*empty.Empty)(nil), "test.Maps.Sfixed32SetEntry")
	proto.RegisterMapType((map[int64]*empty.Empty)(nil), "test.Maps.Sfixed64SetEntry")
	proto.RegisterMapType((map[int32]Void)(nil), "test.Maps.Sint32SetEntry")
	proto.RegisterMapType((map[int64]Void)(nil), "test.Maps.Sint64SetEntry")
	proto.RegisterMapType((map[int32]State)(nil), "test.Maps.StatesEntry")
	proto.RegisterMapType((map[string]string)(nil), "test.Maps.StringNamesEntry")
	proto.RegisterMapType((map[string]Void)(nil), "test.Maps.StringSetEntry")
	proto.RegisterMapType((map[uint32]Void)(nil), "test.Maps.Uint32SetEntry")
	proto.RegisterMapType((map[uint64]Void)(nil), "test.Maps.Uint64SetEntry")
	proto.RegisterType((*TestMessage)(nil), "test.TestMessage")
	proto.RegisterType((*TestMessage_Misc)(nil), "test.TestMessage.Misc")
}

func init() {
	proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e)
}

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 3096 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0x6d, 0x73, 0xdb, 0xc6,
	0xf1, 0x0f, 0xf8, 0xcc, 0x25, 0x29, 0x51, 0xe7, 0x87, 0x9c, 0x65, 0xc7, 0x81, 0x95, 0xfc, 0x13,
	0xfc, 0x1d, 0x57, 0xa1, 0x28, 0xea, 0x89, 0x89, 0xdd, 0x50, 0x96, 0x6c, 0xab, 0xb6, 0x64, 0x0f,
	0x24, 0x3b, 0x9d, 0x8e, 0x67, 0x38, 0xa0, 0x70, 0x92, 0x51, 0x83, 0x00, 0x83, 0x03, 0x6d, 0x33,
	0x2f, 0xfb, 0x01, 0xfa, 0xaa, 0x33, 0x9d, 0x7e, 0xb9, 0xbe, 0xef, 0xa7, 0x68, 0xe7, 0x1e, 0x00,
	0x1e, 0x48, 0x82, 0xb2, 0xe5, 0x57, 0xc2, 0xed, 0xed, 0xef, 0xb7, 0x7b, 0x7b, 0x7b, 0xa7, 0x5b,
	0x2e, 0x40, 0x48, 0x68, 0xb8, 0x3a, 0x08, 0xfc, 0xd0, 0x47, 0x39, 0xf6, 0xbd, 0x7c, 0xe3, 0xdc,
	0xf7, 0xcf, 0x5d, 0xf2, 0x23, 0x97, 0xf5, 0x86, 0x67, 0x3f, 0x5a, 0xde, 0x48, 0x28, 0x2c, 0xdf,
	0x9e, 0x9c, 0xb2, 0x87, 0x81, 0x15, 0x3a, 0xbe, 0x27, 0xe7, 0x6f, 0x4e, 0xce, 0x93, 0xfe, 0x20,
	0x8c, 0xc0, 0xb7, 0x26, 0x27, 0x69, 0x18, 0x0c, 0x4f, 0xa5, 0xed, 0xe5, 0xaf, 0x27, 0x67, 0x43,
	0xa7, 0x4f, 0x68, 0x68, 0xf5, 0x07, 0x69, 0xb6, 0xdf, 0x07, 0xd6, 0x60, 0x40, 0x02, 0x2a, 0xe6,
	0x57, 0xfe, 0x99, 0x85, 0xc2, 0x0b, 0x12, 0x50, 0xdf, 0x43, 0x0b, 0x90, 0x71, 0x6c, 0xac, 0xe9,
	0x19, 0x23, 0x67, 0x66, 0x1c, 0x1b, 0x21, 0xc8, 0x79, 0x56, 0x9f, 0xe0, 0x8c, 0x9e, 0x31, 0xca,
	0x26, 0xff, 0x46, 0xdf, 0x43, 0xd1, 0xb2, 0xed, 0x80, 0x50, 0x8a, 0xb3, 0xba, 0x66, 0x54, 0x9a,
	0xb5, 0x55, 0x1e, 0x89, 0x8e, 0x10, 0x9a, 0xd1, 0x2c, 0xba, 0x01, 0xd9, 0x0f, 0xa3, 0xdf, 0x71,
	0x4e, 0xd7, 0x0c, 0xad, 0x5d, 0x5c, 0x5f, 0x5d, 0x6b, 0xad, 0x6d, 0xec, 0x98, 0x4c, 0x86, 0x6e,
	0x43, 0x3e, 0x74, 0x42, 0x97, 0xe0, 0xbc, 0xae, 0x19, 0xe5, 0x76, 0xc9, 0x7f, 0x47, 0x02, 0x4a,
	0x48, 0x60, 0x0a, 0x31, 0xba, 0x0e, 0x05, 0xd7, 0xea, 0x11, 0x97, 0xe2, 0x82, 0x9e, 0x35, 0xca,
	0xa6, 0x1c, 0xa1, 0xaf, 0xa0, 0xe8, 0xd0, 0x6e, 0x40, 0x2c, 0x17, 0x17, 0x75, 0xcd, 0x28, 0xb5,
	0x73, 0x61, 0x30, 0x24, 0x66, 0xc1, 0xa1, 0x26, 0xb1, 0x5c, 0x64, 0x40, 0xc1, 0x1f, 0x58, 0xbf,
	0x0d, 0x09, 0x2e, 0xe9, 0x9a, 0x51, 0x6d, 0xd7, 0x5f, 0x37, 0x1a, 0x6b, 0xaf, 0x1b, 0x8d, 0xe6,
	0xeb, 0x46, 0x63, 0xfd, 0x75, 0xa3, 0xd1, 0x32, 0xe5, 0x3c, 0xfa, 0x0e, 0x0a, 0x03, 0x2b, 0x20,
	0x5e, 0x88, 0xcb, 0x7c, 0x0d, 0x55, 0xb1, 0x06, 0x11, 0x86, 0x27, 0x5f, 0x98, 0x72, 0x16, 0x19,
	0x50, 0xa4, 0x4e, 0xcf, 0x75, 0xbc, 0x73, 0x0c, 0x33, 0x15, 0xa3, 0x69, 0xf4, 0x2d, 0xe4, 0x4f,
	0xdf, 0x38, 0xae, 0x8d, 0x2b, 0x33, 0xf5, 0xc4, 0x24, 0xd2, 0x21, 0xe7, 0xf9, 0x1e, 0xc1, 0x55,
	0x5d, 0x33, 0x16, 0x9a, 0x20, 0x94, 0x5e, 0xf9, 0x8e, 0xfd, 0xe4, 0x0b, 0x93, 0xcf, 0xec, 0x02,
	0x94, 0x02, 0xe2, 0x5a, 0xa1, 0xf3, 0x8e, 0xac, 0xfc, 0x06, 0x45, 0x19, 0x55, 0x74, 0x15, 0xf2,
	0xae, 0xe3, 0x91, 0x35, 0xbe, 0x39, 0x65, 0x53, 0x0c, 0x22, 0x69, 0x13, 0x67, 0x58, 0x1c, 0x85,
	0xb4, 0xc9, 0x76, 0xed, 0xd4, 0x09, 0x47, 0x38, 0x2b, 0x76, 0x8d, 0x7d, 0x33, 0x4d, 0x1a, 0x5a,
	0x21, 0xc1, 0x39, 0x81, 0xe7, 0x03, 0x54, 0x87, 0xec, 0xef, 0xce, 0x00, 0xe7, 0xf5, 0x8c, 0x51,
	0x33, 0xd9, 0xe7, 0xca, 0xdf, 0xae, 0x01, 0xfc, 0x4a, 0x5c, 0xf7, 0xa9, 0xe7, 0xbf, 0xf7, 0x28,
	0xba, 0x07, 0x59, 0xcf, 0x7f, 0xcf, 0x8d, 0x56, 0x9a, 0xcb, 0xab, 0x22, 0x93, 0x56, 0xa3, 0x4c,
	0x5a, 0x3d, 0x89, 0x52, 0xcd, 0x64, 0x6a, 0x68, 0x15, 0x72, 0x03, 0x8b, 0x86, 0xdc, 0x9b, 0xf9,
	0xea, 0x5c, 0x0f, 0xb5, 0xa0, 0x78, 0x36, 0x0c, 0x87, 0x01, 0x61, 0xa9, 0x94, 0xbd, 0x00, 0x12,
	0xa9, 0xa2, 0x35, 0x28, 0x0c, 0x48, 0xe0, 0xf8, 0x36, 0x5f, 0x4b, 0xa5, 0x79, 0x63, 0x0a, 0xb4,
	0x27, 0x0f, 0x97, 0x29, 0x15, 0xd1, 0x03, 0xa8, 0x79, 0xe4, 0x43, 0xd8, 0x75, 0xbc, 0x90, 0x04,
	0xef, 0x2c, 0x97, 0xe7, 0xdd, 0x5c, 0x64, 0x95, 0xe9, 0x1f, 0x48, 0x75, 0xf4, 0x08, 0x96, 0xde,
	0x38, 0x34, 0xf4, 0x83, 0x51, 0x4c, 0x21, 0x52, 0x73, 0x2e, 0x47, 0x5d, 0x62, 0x22, 0x1a, 0x8a,
	0x0c, 0xc8, 0x79, 0xc4, 0x0a, 0x71, 0x91, 0x3b, 0x7e, 0x75, 0x0a, 0xda, 0xf1, 0x46, 0x26, 0xd7,
	0x40, 0x77, 0x21, 0x4f, 0x3e, 0x84, 0x81, 0xc5, 0x33, 0x39, 0x4d, 0x55, 0xa8, 0xa0, 0x16, 0x00,
	0xf9, 0x10, 0x12, 0x8f, 0x3a, 0xbe, 0x47, 0x71, 0x99, 0xbb, 0x35, 0x1b, 0xa0, 0xe8, 0xa1, 0x1f,
	0xa1, 0xe0, 0xf7, 0xfe, 0x4a, 0x4e, 0x43, 0x0c, 0xdc, 0x9b, 0x2f, 0xa7, 0x10, 0xc7, 0xfc, 0x9a,
	0x31, 0xa5, 0x1a, 0xfa, 0x05, 0x16, 0xfd, 0x01, 0x5b, 0x98, 0xe5, 0x76, 0x25, 0x52, 0xe4, 0x7a,
	0x2a, 0x72, 0x21, 0xd2, 0x7f, 0x2e, 0x18, 0xd6, 0xa0, 0x28, 0x80, 0x14, 0x57, 0xb9, 0x97, 0xa9,
	0xc8, 0x48, 0x0f, 0xdd, 0x83, 0xfc, 0x3b, 0xcb, 0x1d, 0x12, 0x5c, 0xe3, 0x4e, 0x5e, 0x9f, 0x02,
	0xbc, 0x62, 0xb3, 0xa6, 0x50, 0x42, 0xf7, 0x21, 0x36, 0xd9, 0x15, 0xb0, 0x05, 0xee, 0x61, 0x1a,
	0xac, 0x16, 0x69, 0xf3, 0x21, 0x5a, 0x85, 0x02, 0x47, 0x51, 0xbc, 0xc8, 0xdd, 0x4b, 0x83, 0x49,
	0x2d, 0x96, 0xef, 0xae, 0x43, 0x43, 0x5c, 0x4f, 0x39, 0x1e, 0xcf, 0x1c, 0x1a, 0x0a, 0x04, 0xd7,
	0x43, 0x7f, 0x84, 0xd8, 0x60, 0x97, 0x03, 0x97, 0x52, 0x0e, 0xca, 0x18, 0x58, 0x8d, 0x00, 0x4c,
	0x84, 0x1a, 0xec, 0xbc, 0xd3, 0x90, 0x62, 0x94, 0x72, 0x5c, 0xc6, 0x40, 0xa1, 0x88, 0xd6, 0x20,
	0xdf, 0x1b, 0x85, 0x84, 0xe2, 0x2b, 0xdc, 0xc7, 0x9b, 0x53, 0x88, 0x5d, 0x36, 0x2b, 0x21, 0x5c,
	0x13, 0xed, 0x2a, 0x41, 0x14, 0xd8, 0xab, 0xdc, 0xcd, 0xb9, 0xd8, 0x78, 0x61, 0x5c, 0x86, 0xee,
	0x43, 0x95, 0xd9, 0xef, 0xfa, 0x92, 0xe1, 0x1a, 0xf7, 0x77, 0x2e, 0x03, 0x30, 0xc0, 0x73, 0x01,
	0x6f, 0x41, 0x81, 0x86, 0x01, 0xbb, 0x75, 0xaf, 0x73, 0xb7, 0x6f, 0xcd, 0xca, 0x13, 0xc7, 0x3b,
	0x97, 0xdb, 0x21, 0x74, 0xd1, 0xbe, 0x92, 0xa0, 0x12, 0xfe, 0x25, 0xf7, 0x7c, 0x3e, 0x3c, 0x5e,
	0xad, 0x10, 0xb2, 0xf5, 0x4b, 0xdf, 0x05, 0x09, 0xc5, 0x98, 0x7b, 0x3f, 0x9f, 0x85, 0xaf, 0xf7,
	0xb9, 0x90, 0xf0, 0xcc, 0xe8, 0xf9, 0xbe, 0x8b, 0x6f, 0xa4, 0x64, 0xc6, 0xae, 0xef, 0xbb, 0x32,
	0x33, 0x98, 0x5e, 0x22, 0x33, 0x38, 0x70, 0x39, 0x25, 0x33, 0xc6, 0xc0, 0x38, 0x33, 0x98, 0x08,
	0xfd, 0x3c, 0x0e, 0xb8, 0xef, 0xbb, 0x14, 0xdf, 0x4c, 0x49, 0x90, 0x31, 0x5e, 0xc6, 0x9b, 0x69,
	0xb3, 0x78, 0xdb, 0xfe, 0xb0, 0xe7, 0x12, 0x7c, 0x2b, 0x25, 0xde, 0x7b, 0x7c, 0x5a, 0xc6, 0x5b,
	0xe8, 0x26, 0xe2, 0x2d, 0xe1, 0x5f, 0xa5, 0xc4, 0x5b, 0x85, 0xc7, 0xf1, 0x16, 0x42, 0x25, 0xde,
	0x82, 0x84, 0xe2, 0xdb, 0x29, 0xf1, 0x56, 0x59, 0x44, 0xbc, 0x85, 0x84, 0xa7, 0xf9, 0x99, 0xeb,
	0x5b, 0x21, 0xfe, 0x3a, 0x25, 0xcd, 0x1f, 0xb1, 0x59, 0x99, 0xe6, 0x5c, 0x33, 0x91, 0xe6, 0x02,
	0xab, 0xa7, 0xa4, 0xb9, 0x82, 0x8d, 0x77, 0x89, 0xcb, 0xd8, 0xb6, 0x49, 0xd7, 0x39, 0x03, 0xc5,
	0x77, 0x52, 0xf2, 0x5c, 0xa1, 0xa8, 0x70, 0xc7, 0xb9, 0x80, 0xa2, 0x6d, 0x28, 0xd3, 0xbe, 0xe5,
	0xba, 0xec, 0xdf, 0x0a, 0x5e, 0x49, 0xf1, 0xfd, 0xc0, 0x0b, 0xd7, 0x9b, 0x02, 0x5c, 0xe2, 0xda,
	0x07, 0x5e, 0x88, 0x0e, 0x00, 0x8d, 0x93, 0x3d, 0xa6, 0xf8, 0x26, 0x65, 0x09, 0x0a, 0x45, 0x3d,
	0x4e, 0xf7, 0x88, 0xea, 0x11, 0x2c, 0x45, 0x09, 0x1f, 0x11, 0x51, 0xfc, 0x6d, 0xca, 0x4a, 0x14,
	0xa6, 0x05, 0x91, 0xf2, 0x92, 0x86, 0x65, 0x51, 0xb1, 0xe7, 0x9c, 0x73, 0x3f, 0xfe, 0x2f, 0x7d,
	0x29, 0x9b, 0x2d, 0x99, 0x45, 0x3d, 0xe7, 0x9c, 0x59, 0xdf, 0x87, 0xfa, 0x38, 0xf5, 0x25, 0xfc,
	0xbb, 0xf4, 0x65, 0x44, 0xf0, 0x78, 0xf3, 0x76, 0x05, 0xcd, 0x2e, 0x2c, 0x46, 0x07, 0x40, 0x90,
	0x50, 0xfc, 0x7d, 0xfa, 0x12, 0x22, 0x16, 0x91, 0x45, 0x82, 0x82, 0xa2, 0x2d, 0x28, 0xc9, 0x08,
	0xd8, 0xd8, 0x48, 0x39, 0x08, 0x2f, 0x95, 0x00, 0x14, 0xc5, 0x6e, 0xd8, 0xe8, 0x09, 0x2c, 0x4d,
	0x6e, 0x86, 0x8d, 0xff, 0x3f, 0xe5, 0x2c, 0xa8, 0x0c, 0x8b, 0xc9, 0xcd, 0xb0, 0x59, 0x34, 0x92,
	0x7b, 0x61, 0x53, 0x7c, 0x37, 0xe5, 0x38, 0xa8, 0x44, 0x35, 0x65, 0x2f, 0x6c, 0x8a, 0xd6, 0xa1,
	0xc0, 0xc3, 0x60, 0xe3, 0x1f, 0xe6, 0xac, 0x23, 0x8a, 0x42, 0x9e, 0x6d, 0x85, 0x8d, 0xf6, 0x94,
	0xf3, 0x2c, 0xd1, 0xf7, 0xe6, 0xac, 0x21, 0x42, 0xd7, 0xd4, 0x9d, 0xb0, 0x51, 0x27, 0x3e, 0xce,
	0x82, 0x83, 0xe2, 0x3f, 0xcc, 0xf1, 0x3f, 0x22, 0xa9, 0xc4, 0x1b, 0x61, 0xd3, 0x95, 0x7f, 0x17,
	0xe1, 0xda, 0xd1, 0xb0, 0xdf, 0x23, 0x01, 0x4d, 0xfe, 0x41, 0xb7, 0xa1, 0x3c, 0xa4, 0x43, 0xcb,
	0x75, 0x47, 0x5d, 0xf6, 0x14, 0xd6, 0x8c, 0x7c, 0x5b, 0x5b, 0x33, 0x4b, 0x52, 0xb6, 0x86, 0x6e,
	0x01, 0x50, 0xbf, 0x4f, 0xba, 0xde, 0xb0, 0xdf, 0x5d, 0xe3, 0xef, 0xd0, 0xbc, 0x59, 0x62, 0x92,
	0xa3, 0x61, 0x7f, 0x0d, 0xe9, 0x50, 0xf5, 0x08, 0xb1, 0x89, 0x2d, 0xe7, 0xd9, 0x03, 0x39, 0x6f,
	0x82, 0x90, 0x71, 0x0d, 0x85, 0xbf, 0xc9, 0x2b, 0x97, 0x6c, 0x5b, 0x6b, 0xc6, 0xfc, 0xcd, 0x04,
	0x7f, 0x93, 0xbf, 0x22, 0xb3, 0x31, 0x7f, 0x73, 0x82, 0xbf, 0x89, 0x0b, 0x7a, 0xc6, 0xc8, 0x2a,
	0xfc, 0x4d, 0x95, 0x7f, 0x9d, 0x97, 0x30, 0xb5, 0xb6, 0xb6, 0x1e, 0xf3, 0xaf, 0x27, 0xf8, 0xd7,
	0xf9, 0xdb, 0xaf, 0x16, 0xf3, 0xaf, 0x4f, 0xf0, 0xaf, 0xe3, 0x32, 0x7f, 0xb7, 0x8f, 0xf9, 0xd7,
	0x55, 0xfe, 0x16, 0xaf, 0x58, 0x72, 0x6d, 0xad, 0x15, 0xf3, 0xb7, 0x12, 0xfc, 0x2d, 0xfe, 0x7c,
	0xcb, 0xc5, 0xfc, 0xad, 0x09, 0xfe, 0x16, 0xae, 0xf2, 0x42, 0x70, 0xcc, 0xdf, 0x52, 0xf9, 0x37,
	0x70, 0x4d, 0xd7, 0x8c, 0xa5, 0xb6, 0xb6, 0x11, 0xf3, 0x6f, 0x24, 0xf8, 0x37, 0xf8, 0xe3, 0x6b,
	0x29, 0xe6, 0xdf, 0x98, 0xe0, 0xdf, 0xc0, 0x8b, 0x7a, 0xc6, 0x58, 0x52, 0xf8, 0x37, 0x54, 0xfe,
	0x4d, 0x5c, 0xd7, 0x35, 0x03, 0xb5, 0xb5, 0xcd, 0x98, 0x7f, 0x33, 0xc1, 0xbf, 0xc9, 0x9f, 0x4f,
	0x28, 0xe6, 0xdf, 0x9c, 0xe0, 0xdf, 0xc4, 0x48, 0xcf, 0x18, 0x48, 0xe1, 0xdf, 0x54, 0xf9, 0xb7,
	0xf0, 0x15, 0x5d, 0x33, 0x8a, 0x6d, 0x6d, 0x2b, 0xe6, 0xdf, 0x4a, 0xf0, 0x6f, 0xf1, 0x77, 0x4f,
	0x31, 0xe6, 0xdf, 0x9a, 0xe0, 0xdf, 0xc2, 0xd7, 0xf4, 0x8c, 0x51, 0x54, 0xf8, 0xb7, 0x54, 0xfe,
	0x6d, 0x7c, 0x5d, 0xd7, 0x8c, 0x42, 0x5b, 0xdb, 0x8e, 0xf9, 0xb7, 0x13, 0xfc, 0xdb, 0xfc, 0x75,
	0x52, 0x88, 0xf9, 0xb7, 0x27, 0xf8, 0xb7, 0x31, 0xd6, 0x33, 0x46, 0x41, 0xe1, 0xdf, 0x56, 0xf9,
	0x77, 0xf0, 0x0d, 0x5d, 0x33, 0x16, 0xdb, 0xda, 0x4e, 0xcc, 0xbf, 0x93, 0xe0, 0xdf, 0xe1, 0x8f,
	0x88, 0xc5, 0x98, 0x7f, 0x67, 0x82, 0x7f, 0x07, 0xdf, 0xd4, 0x33, 0xc6, 0xa2, 0xc2, 0xbf, 0x83,
	0xee, 0x00, 0xc4, 0xe7, 0xab, 0x81, 0x6f, 0xe9, 0x9a, 0x51, 0x6f, 0x67, 0xd6, 0x1a, 0x66, 0x64,
	0x75, 0xad, 0x81, 0x6e, 0x43, 0x65, 0x7c, 0xc4, 0x1a, 0xfc, 0x3f, 0x7e, 0xdd, 0x2c, 0x47, 0x67,
	0xac, 0x81, 0x56, 0x58, 0xad, 0x35, 0x3e, 0x64, 0x0d, 0x7c, 0x5b, 0xcf, 0x18, 0x75, 0xb3, 0x32,
	0x3e, 0x65, 0x8d, 0x95, 0xbf, 0x6b, 0x50, 0xe8, 0x04, 0x81, 0x35, 0xe2, 0x85, 0xad, 0x67, 0xf5,
	0x09, 0xc5, 0x1a, 0xaf, 0xf4, 0xc5, 0x80, 0x95, 0xb0, 0xb6, 0x15, 0x5a, 0x38, 0xa3, 0x67, 0x8d,
	0xaa, 0xc9, 0xbf, 0xd1, 0x5d, 0x28, 0x47, 0x95, 0x71, 0x54, 0x2f, 0x26, 0xaa, 0x6c, 0x73, 0x3c,
	0x8d, 0x56, 0xa1, 0xea, 0x87, 0x6f, 0x48, 0xd0, 0xe5, 0x75, 0x2e, 0xc5, 0x0b, 0x7a, 0xd6, 0x58,
	0x68, 0x56, 0x84, 0xfa, 0x31, 0x93, 0x99, 0x15, 0xae, 0xc0, 0xbf, 0xe9, 0xca, 0xbf, 0xae, 0x41,
	0xee, 0xd0, 0x1a, 0xb0, 0x7f, 0xc8, 0x20, 0x5e, 0x7d, 0x5d, 0x4a, 0x42, 0xee, 0x13, 0x2b, 0xf1,
	0x38, 0x8c, 0xcd, 0xcb, 0x27, 0xdf, 0x31, 0x09, 0xf7, 0xbd, 0x30, 0x18, 0x99, 0x65, 0x1a, 0x8d,
	0xd1, 0x06, 0x94, 0x1d, 0x76, 0x1f, 0x73, 0x60, 0x86, 0x03, 0xb1, 0x02, 0xe4, 0x77, 0x75, 0x8c,
	0x2b, 0x39, 0x72, 0x28, 0x61, 0x9b, 0x2d, 0x0e, 0xcb, 0xce, 0x82, 0x6d, 0xb6, 0x12, 0x30, 0x3e,
	0x64, 0x7e, 0x0e, 0xc7, 0xe6, 0x72, 0x53, 0x7e, 0xbe, 0x74, 0x12, 0xf6, 0xca, 0xc3, 0xd8, 0xa0,
	0x44, 0x4a, 0x8b, 0xf9, 0x99, 0x48, 0xc5, 0x64, 0x79, 0xa8, 0xda, 0xa4, 0x63, 0x9b, 0x85, 0xe9,
	0xd8, 0x4c, 0xd8, 0xa4, 0xaa, 0x4d, 0x3a, 0xb6, 0x59, 0x9c, 0x89, 0x54, 0x6d, 0xd2, 0xd8, 0x66,
	0x13, 0x4a, 0xec, 0x41, 0xcb, 0x71, 0x25, 0x59, 0x33, 0x8e, 0x71, 0xec, 0xf5, 0x1a, 0xa3, 0x8a,
	0x3d, 0x31, 0x42, 0x3f, 0x41, 0xe5, 0xcc, 0xf9, 0x40, 0x6c, 0xe9, 0x68, 0x59, 0x3e, 0x85, 0xc7,
	0xb0, 0x47, 0x62, 0x36, 0x46, 0xc2, 0x59, 0x2c, 0x88, 0xc1, 0xd2, 0x57, 0x98, 0x0d, 0x56, 0x9c,
	0x85, 0xb3, 0x58, 0x80, 0x1e, 0x40, 0x95, 0xaa, 0xa6, 0x2b, 0xf2, 0x05, 0xa2, 0xac, 0xf4, 0x6c,
	0xc2, 0x76, 0x85, 0x2a, 0xc6, 0x63, 0xbc, 0xb4, 0x5e, 0x4d, 0xc1, 0x2b, 0xe6, 0x2b, 0x54, 0xb1,
	0xff, 0x67, 0xb8, 0x3e, 0x20, 0xfe, 0xc0, 0x25, 0xdd, 0xde, 0xa8, 0x4b, 0xfa, 0x03, 0xd7, 0x1f,
	0x11, 0x7e, 0x52, 0x71, 0x8d, 0x33, 0x7d, 0xa3, 0x30, 0xbd, 0xe0, 0x8a, 0xbb, 0xa3, 0x7d, 0xa9,
	0x76, 0x34, 0xec, 0x0b, 0xc6, 0x2b, 0x83, 0xe9, 0x19, 0x56, 0x1a, 0x2b, 0x47, 0x89, 0x95, 0xc6,
	0xea, 0x99, 0x60, 0x13, 0x02, 0x2c, 0xb5, 0xd8, 0xeb, 0xda, 0xe2, 0x07, 0x9c, 0x79, 0xf2, 0xd6,
	0xf1, 0x6c, 0x59, 0x52, 0xdf, 0x52, 0x70, 0xe2, 0x06, 0xd8, 0x1d, 0x3d, 0x75, 0x3c, 0x5b, 0xa0,
	0xab, 0x96, 0x22, 0xe2, 0xd1, 0x10, 0x67, 0x51, 0xdc, 0x10, 0xf5, 0xe9, 0x68, 0xf0, 0xe9, 0x23,
	0x36, 0x1b, 0x45, 0x63, 0x2c, 0x61, 0x5b, 0xc9, 0xab, 0x4f, 0x09, 0x5f, 0x9a, 0xda, 0x4a, 0x5e,
	0x6c, 0x2a, 0x68, 0xe8, 0xc5, 0x02, 0x96, 0xb2, 0x3c, 0xf1, 0x04, 0x16, 0x4d, 0xa5, 0x2c, 0x4b,
	0x3d, 0x05, 0x5a, 0xee, 0x45, 0x63, 0xe6, 0xb6, 0x28, 0x64, 0x24, 0xf6, 0xca, 0x94, 0xdb, 0xa2,
	0x6a, 0x51, 0xdd, 0xb6, 0xc7, 0x12, 0x9e, 0x81, 0xac, 0x3a, 0x90, 0xf0, 0xab, 0xd3, 0x19, 0xc8,
	0x66, 0x55, 0xb7, 0xcf, 0x62, 0xc1, 0xf2, 0x13, 0x58, 0x48, 0x5e, 0x51, 0xa8, 0x0e, 0xd9, 0xb7,
	0x64, 0xc4, 0x1f, 0x4b, 0x65, 0x93, 0x7d, 0x22, 0x3d, 0xfa, 0x4d, 0x25, 0x33, 0xf9, 0x2b, 0xa4,
	0xfc, 0x1d, 0xa5, 0x9d, 0xd9, 0xd6, 0x96, 0x1f, 0x43, 0x2d, 0x71, 0x67, 0xa9, 0x44, 0xf9, 0x4f,
	0x27, 0x1a, 0xa7, 0xac, 0x4a, 0x94, 0xfd, 0x14, 0xa2, 0x27, 0xb0, 0x90, 0xbc, 0xd6, 0x54, 0xa6,
	0xda, 0x25, 0x98, 0x66, 0xfb, 0x94, 0xfb, 0x44, 0xa6, 0xe3, 0x54, 0x9f, 0x96, 0x2e, 0xc1, 0x34,
	0xdb, 0x27, 0xf4, 0x29, 0x4c, 0x8f, 0xa0, 0xaa, 0x5e, 0x8c, 0x2a, 0x4f, 0xe9, 0x53, 0x78, 0x5e,
	0xc2, 0xe2, 0xc4, 0x4d, 0xa9, 0x52, 0x15, 0x05, 0xd5, 0x3d, 0x95, 0x6a, 0xd6, 0x4f, 0x66, 0xfb,
	0xfd, 0x41, 0x38, 0x9a, 0x45, 0x3b, 0x7b, 0xa5, 0x85, 0xcb, 0xd2, 0xbe, 0x82, 0xfa, 0xe4, 0xe5,
	0xaa, 0xf2, 0x2e, 0x7e, 0x36, 0xef, 0x6c, 0x7f, 0xeb, 0x97, 0xe5, 0x3d, 0x01, 0x9c, 0x76, 0x05,
	0xcf, 0x38, 0x6a, 0x2b, 0x49, 0xfe, 0xe4, 0xc3, 0x27, 0xb1, 0xf7, 0x15, 0xe5, 0x3a, 0x9e, 0x41,
	0x74, 0x27, 0xb9, 0xf5, 0x89, 0x27, 0x91, 0xc2, 0x73, 0x08, 0x4b, 0x53, 0xd7, 0xf3, 0x8c, 0xab,
	0x64, 0xb6, 0x5b, 0x02, 0xa9, 0xd2, 0x3d, 0x80, 0xfa, 0xe4, 0x5d, 0x3d, 0x83, 0xed, 0xaa, 0xca,
	0x56, 0x56, 0xf1, 0xf7, 0x61, 0x71, 0xe2, 0xb2, 0xbe, 0x08, 0x5e, 0x55, 0xe1, 0x3f, 0xc3, 0x42,
	0xf2, 0xbe, 0xbe, 0x08, 0x5d, 0x9a, 0x70, 0x7e, 0xf2, 0xc6, 0xbe, 0x08, 0xaf, 0x4d, 0x38, 0x3f,
	0x71, 0x65, 0x5f, 0x04, 0xcf, 0x28, 0xf0, 0x95, 0xff, 0xe6, 0xa1, 0x72, 0x42, 0x68, 0x78, 0x48,
	0x28, 0xb5, 0xce, 0x09, 0xfa, 0x01, 0x8a, 0x01, 0x39, 0x1d, 0x06, 0x34, 0x8a, 0xfa, 0x92, 0x88,
	0xba, 0xa2, 0x63, 0x46, 0x1a, 0xe8, 0x67, 0xa8, 0x07, 0x64, 0x40, 0xac, 0x90, 0xd8, 0xdd, 0x08,
	0x25, 0x5e, 0x99, 0x33, 0x50, 0x8b, 0x91, 0xaa, 0x29, 0xd1, 0xdf, 0xf2, 0x56, 0x0b, 0xf5, 0x3d,
	0xd9, 0x6a, 0x49, 0xa6, 0x9d, 0x9c, 0x63, 0x29, 0x25, 0x7a, 0x4b, 0x79, 0x3d, 0x33, 0x95, 0x52,
	0xa2, 0xd1, 0xb4, 0x01, 0x45, 0x4f, 0x94, 0xf0, 0xb8, 0x20, 0x7f, 0xdb, 0xe1, 0x4a, 0x33, 0xab,
	0x7c, 0x33, 0xd2, 0x45, 0xdf, 0x43, 0x35, 0x2e, 0x67, 0x9b, 0xad, 0x26, 0xaf, 0x98, 0x33, 0xed,
	0x1c, 0xfb, 0x36, 0x2b, 0x51, 0x51, 0xdb, 0x6c, 0x25, 0xeb, 0x72, 0xd1, 0x33, 0xc9, 0xc4, 0x75,
	0x4f, 0x67, 0xa2, 0xee, 0xb1, 0x78, 0xdd, 0x9c, 0x51, 0xea, 0x9e, 0x8e, 0x6a, 0x68, 0x67, 0x67,
	0x67, 0x87, 0x97, 0xce, 0x5a, 0x3b, 0xc7, 0xbe, 0x63, 0x43, 0x6c, 0x90, 0x30, 0xd4, 0xe3, 0x05,
	0xb4, 0x16, 0x1b, 0xda, 0x9d, 0x30, 0xd4, 0xe3, 0x05, 0xb4, 0xa6, 0x18, 0xda, 0x45, 0xeb, 0x00,
	0xbc, 0x13, 0x25, 0x02, 0x56, 0x9b, 0x3a, 0x83, 0xed, 0xe2, 0x8b, 0xfd, 0xa3, 0xbd, 0x83, 0xa3,
	0xc7, 0x66, 0x99, 0xe9, 0x71, 0x19, 0xba, 0x03, 0xd5, 0x9e, 0x45, 0x09, 0x7b, 0x14, 0x86, 0xc3,
	0xb3, 0x33, 0x5e, 0x57, 0x57, 0xcd, 0x8a, 0x90, 0x1d, 0x33, 0x11, 0xba, 0x09, 0x65, 0xd1, 0xda,
	0xec, 0x3a, 0x36, 0xaf, 0xab, 0xab, 0x66, 0x49, 0x08, 0x0e, 0x6c, 0xa4, 0x43, 0xe6, 0xfd, 0x5b,
	0x5e, 0x4e, 0x57, 0x9a, 0x75, 0x61, 0x6c, 0xdc, 0xe3, 0x33, 0x33, 0xef, 0xdf, 0xb2, 0x8d, 0x16,
	0x4f, 0x2f, 0xd9, 0x92, 0x48, 0x1e, 0x64, 0x39, 0x87, 0x6e, 0x43, 0xae, 0x6f, 0x0d, 0xd8, 0x6b,
	0x88, 0xe9, 0xc0, 0xf8, 0x49, 0x62, 0x72, 0x39, 0xba, 0x0b, 0xb9, 0xbe, 0x43, 0x4f, 0x79, 0x61,
	0x0d, 0xd1, 0x13, 0x51, 0x49, 0xb0, 0xd5, 0x43, 0x87, 0x9e, 0x9a, 0x5c, 0x67, 0xf9, 0x2e, 0xe4,
	0xd8, 0x88, 0x9d, 0x84, 0x33, 0xdf, 0x8f, 0x4e, 0xc2, 0x99, 0xef, 0x33, 0x49, 0xcf, 0x0a, 0xe4,
	0x8f, 0x37, 0xec, 0xf3, 0xee, 0x3f, 0x34, 0xc8, 0x8b, 0x48, 0x54, 0xa0, 0x78, 0x70, 0xf4, 0xaa,
	0xf3, 0xec, 0x60, 0xaf, 0xfe, 0x85, 0x18, 0x1c, 0x9c, 0x1c, 0x74, 0x9e, 0xd5, 0x35, 0x36, 0x90,
	0x91, 0xab, 0x67, 0xd8, 0xc0, 0x7c, 0x79, 0x74, 0xc4, 0x06, 0x59, 0x04, 0x50, 0x78, 0xd1, 0x79,
	0x79, 0xbc, 0xbf, 0x57, 0xcf, 0x21, 0x04, 0x0b, 0x9d, 0x5f, 0x3b, 0x07, 0x27, 0x07, 0x47, 0x8f,
	0xbb, 0x07, 0x47, 0x2f, 0x5e, 0x9e, 0xd4, 0xf3, 0x68, 0x01, 0xe0, 0x61, 0xe7, 0xe8, 0xe1, 0xfe,
	0xb3, 0x67, 0x4c, 0xbf, 0x80, 0xaa, 0x50, 0x7a, 0xf8, 0xfc, 0xf0, 0xc5, 0xb3, 0xfd, 0x93, 0xfd,
	0x7a, 0x11, 0xd5, 0xa0, 0x2c, 0x67, 0xf7, 0xf7, 0xea, 0x25, 0x46, 0xf6, 0xa8, 0x73, 0xc0, 0xbe,
	0xcb, 0x77, 0xeb, 0x90, 0x63, 0xff, 0x32, 0x51, 0x09, 0x72, 0xaf, 0x9e, 0x33, 0x8f, 0x9a, 0xff,
	0x41, 0x50, 0x79, 0xea, 0x84, 0xa7, 0x6f, 0x88, 0x77, 0xec, 0x78, 0x6f, 0xd1, 0x26, 0xe4, 0x5e,
	0x38, 0xde, 0x39, 0x4a, 0xf9, 0x77, 0xb0, 0x9c, 0x22, 0x47, 0x0d, 0x28, 0xed, 0x7f, 0x38, 0x7d,
	0x63, 0x79, 0xe7, 0x04, 0x4d, 0x9f, 0xd3, 0xe5, 0x69, 0x11, 0x6a, 0x01, 0xbc, 0x1c, 0xb8, 0xbe,
	0x65, 0x1f, 0x5a, 0xde, 0xe8, 0xe3, 0x30, 0x86, 0x86, 0x36, 0xa1, 0xba, 0xe7, 0xbf, 0xf7, 0x3e,
	0x0d, 0xd7, 0xd0, 0xd0, 0x36, 0xc3, 0x31, 0xc4, 0xc9, 0x1b, 0xde, 0xee, 0xf8, 0x48, 0x7b, 0x0d,
	0x0d, 0x3d, 0x84, 0xda, 0x31, 0xf1, 0xec, 0xb8, 0xad, 0x8b, 0xe6, 0xb4, 0x7c, 0x53, 0xc3, 0xd3,
	0x81, 0x2a, 0x23, 0x89, 0x1a, 0xad, 0x28, 0xbd, 0x07, 0x9b, 0x4a, 0xb1, 0x05, 0x45, 0x46, 0xd1,
	0xf1, 0x46, 0x68, 0x66, 0xab, 0x34, 0x15, 0x78, 0x1f, 0x80, 0x01, 0x45, 0x9f, 0x12, 0xa5, 0x35,
	0x30, 0x53, 0xe1, 0x3f, 0x41, 0x99, 0xc1, 0x45, 0xbf, 0x31, 0xa5, 0xbf, 0x98, 0x0a, 0x96, 0xc1,
	0x8b, 0x9b, 0x7c, 0x68, 0x4e, 0x03, 0x30, 0x95, 0xe4, 0x17, 0xe1, 0x81, 0x68, 0xb4, 0xcd, 0xeb,
	0xc8, 0xa5, 0x32, 0xec, 0xc6, 0x21, 0x60, 0xb9, 0x3d, 0xb7, 0x2d, 0x96, 0xca, 0xf1, 0x00, 0x4a,
	0xdc, 0x0b, 0xdf, 0x77, 0xd1, 0x9c, 0x2e, 0xd5, 0x45, 0x3e, 0xc8, 0x16, 0xd2, 0xdc, 0x56, 0xd1,
	0x45, 0x91, 0x10, 0xad, 0x9c, 0x79, 0x3d, 0x9b, 0x8b, 0x18, 0x78, 0x9d, 0x84, 0xe6, 0xf5, 0x4a,
	0x3e, 0x82, 0x61, 0xb3, 0x85, 0xe6, 0xb5, 0x2a, 0x2e, 0x8a, 0x84, 0x68, 0x06, 0xa0, 0xb9, 0x5d,
	0x82, 0x8f, 0xe1, 0xd8, 0x6c, 0xa1, 0xb9, 0xbf, 0xd4, 0xa7, 0x72, 0x1c, 0xc2, 0x35, 0xc6, 0x71,
	0x38, 0x74, 0x43, 0x67, 0xe0, 0x92, 0xcf, 0x3a, 0xe1, 0x86, 0x86, 0x9e, 0xc2, 0x55, 0x95, 0xee,
	0x33, 0xce, 0xba, 0xa1, 0xa1, 0x0e, 0x2c, 0xaa, 0x64, 0x9f, 0x7c, 0xea, 0x0d, 0x0d, 0x3d, 0x06,
	0xa4, 0x52, 0x5c, 0xf2, 0xfc, 0x1b, 0x1a, 0xda, 0x87, 0x25, 0x95, 0xe8, 0x52, 0x37, 0x81, 0xa1,
	0x4d, 0x86, 0xfb, 0xb3, 0xee, 0x04, 0x43, 0x43, 0x7f, 0x4a, 0x7a, 0x75, 0xf9, 0xdb, 0xc1, 0xd0,
	0xd0, 0xb3, 0xa9, 0x50, 0x5d, 0xfa, 0x9e, 0x30, 0x34, 0xf4, 0x04, 0xea, 0x09, 0xcf, 0x2e, 0x79,
	0x63, 0x4c, 0xfb, 0xf5, 0x39, 0x77, 0xc7, 0x74, 0xc4, 0x2e, 0x7f, 0x8b, 0x4c, 0x73, 0x5d, 0xfe,
	0x3e, 0x99, 0xc9, 0x75, 0xc9, 0x9b, 0x65, 0x3a, 0x62, 0x9f, 0x73, 0xc7, 0xcc, 0x66, 0xbb, 0xec,
	0x6d, 0x63, 0x68, 0xbb, 0x85, 0xbf, 0xe4, 0xfa, 0x96, 0xe3, 0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0x5a, 0x93, 0xec, 0x1b, 0x88, 0x29, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KitchenSinkClient is the client API for KitchenSink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KitchenSinkClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Exchange(ctx context.Context, in *TestMessage, opts ...grpc.CallOption) (*TestMessage, error)
	UploadMany(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_UploadManyClient, error)
	DownloadMany(ctx context.Context, in *TestMessage, opts ...grpc.CallOption) (KitchenSink_DownloadManyClient, error)
	DoManyThings(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_DoManyThingsClient, error)
	SendTimestamp(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*empty.Empty, error)
	SendDuration(ctx context.Context, in *duration.Duration, opts ...grpc.CallOption) (*empty.Empty, error)
	SendAny(ctx context.Context, in *any.Any, opts ...grpc.CallOption) (*empty.Empty, error)
	SendStruct(ctx context.Context, in *_struct.Struct, opts ...grpc.CallOption) (*empty.Empty, error)
	SendValue(ctx context.Context, in *_struct.Value, opts ...grpc.CallOption) (*empty.Empty, error)
	SendListValue(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error)
	SendBytes(ctx context.Context, in *wrappers.BytesValue, opts ...grpc.CallOption) (*empty.Empty, error)
	SendString(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*empty.Empty, error)
	SendBool(ctx context.Context, in *wrappers.BoolValue, opts ...grpc.CallOption) (*empty.Empty, error)
	SendDouble(ctx context.Context, in *wrappers.DoubleValue, opts ...grpc.CallOption) (*empty.Empty, error)
	SendFloat(ctx context.Context, in *wrappers.FloatValue, opts ...grpc.CallOption) (*empty.Empty, error)
	SendInt32(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*empty.Empty, error)
	SendInt64(ctx context.Context, in *wrappers.Int64Value, opts ...grpc.CallOption) (*empty.Empty, error)
	SendUInt32(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (*empty.Empty, error)
	SendUInt64(ctx context.Context, in *wrappers.UInt64Value, opts ...grpc.CallOption) (*empty.Empty, error)
	SendMultipleTimestamp(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleTimestampClient, error)
	SendMultipleDuration(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleDurationClient, error)
	SendMultipleAny(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleAnyClient, error)
	SendMultipleStruct(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleStructClient, error)
	SendMultipleValue(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleValueClient, error)
	SendMultipleListValue(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleListValueClient, error)
	SendMultipleBytes(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleBytesClient, error)
	SendMultipleString(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleStringClient, error)
	SendMultipleBool(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleBoolClient, error)
	SendMultipleDouble(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleDoubleClient, error)
	SendMultipleFloat(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleFloatClient, error)
	SendMultipleInt32(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleInt32Client, error)
	SendMultipleInt64(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleInt64Client, error)
	SendMultipleUInt32(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleUInt32Client, error)
	SendMultipleUInt64(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleUInt64Client, error)
}

type kitchenSinkClient struct {
	cc grpc.ClientConnInterface
}

func NewKitchenSinkClient(cc grpc.ClientConnInterface) KitchenSinkClient {
	return &kitchenSinkClient{cc}
}

func (c *kitchenSinkClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) Exchange(ctx context.Context, in *TestMessage, opts ...grpc.CallOption) (*TestMessage, error) {
	out := new(TestMessage)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/Exchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) UploadMany(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_UploadManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[0], "/test.KitchenSink/UploadMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkUploadManyClient{stream}
	return x, nil
}

type KitchenSink_UploadManyClient interface {
	Send(*TestMessage) error
	CloseAndRecv() (*TestMessage, error)
	grpc.ClientStream
}

type kitchenSinkUploadManyClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkUploadManyClient) Send(m *TestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkUploadManyClient) CloseAndRecv() (*TestMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) DownloadMany(ctx context.Context, in *TestMessage, opts ...grpc.CallOption) (KitchenSink_DownloadManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[1], "/test.KitchenSink/DownloadMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkDownloadManyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KitchenSink_DownloadManyClient interface {
	Recv() (*TestMessage, error)
	grpc.ClientStream
}

type kitchenSinkDownloadManyClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkDownloadManyClient) Recv() (*TestMessage, error) {
	m := new(TestMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) DoManyThings(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_DoManyThingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[2], "/test.KitchenSink/DoManyThings", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkDoManyThingsClient{stream}
	return x, nil
}

type KitchenSink_DoManyThingsClient interface {
	Send(*TestMessage) error
	Recv() (*TestMessage, error)
	grpc.ClientStream
}

type kitchenSinkDoManyThingsClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkDoManyThingsClient) Send(m *TestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkDoManyThingsClient) Recv() (*TestMessage, error) {
	m := new(TestMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendTimestamp(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendDuration(ctx context.Context, in *duration.Duration, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendAny(ctx context.Context, in *any.Any, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendAny", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendStruct(ctx context.Context, in *_struct.Struct, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendStruct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendValue(ctx context.Context, in *_struct.Value, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendListValue(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendListValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendBytes(ctx context.Context, in *wrappers.BytesValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendString(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendBool(ctx context.Context, in *wrappers.BoolValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendDouble(ctx context.Context, in *wrappers.DoubleValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendDouble", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendFloat(ctx context.Context, in *wrappers.FloatValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendInt32(ctx context.Context, in *wrappers.Int32Value, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendInt32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendInt64(ctx context.Context, in *wrappers.Int64Value, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendInt64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendUInt32(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendUInt32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendUInt64(ctx context.Context, in *wrappers.UInt64Value, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/test.KitchenSink/SendUInt64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenSinkClient) SendMultipleTimestamp(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleTimestampClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[3], "/test.KitchenSink/SendMultipleTimestamp", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleTimestampClient{stream}
	return x, nil
}

type KitchenSink_SendMultipleTimestampClient interface {
	Send(*timestamp.Timestamp) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleTimestampClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleTimestampClient) Send(m *timestamp.Timestamp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleTimestampClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleDuration(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleDurationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[4], "/test.KitchenSink/SendMultipleDuration", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleDurationClient{stream}
	return x, nil
}

type KitchenSink_SendMultipleDurationClient interface {
	Send(*duration.Duration) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleDurationClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleDurationClient) Send(m *duration.Duration) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleDurationClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleAny(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleAnyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[5], "/test.KitchenSink/SendMultipleAny", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleAnyClient{stream}
	return x, nil
}

type KitchenSink_SendMultipleAnyClient interface {
	Send(*any.Any) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleAnyClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleAnyClient) Send(m *any.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleAnyClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleStruct(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleStructClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[6], "/test.KitchenSink/SendMultipleStruct", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleStructClient{stream}
	return x, nil
}

type KitchenSink_SendMultipleStructClient interface {
	Send(*_struct.Struct) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleStructClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleStructClient) Send(m *_struct.Struct) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleStructClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleValue(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleValueClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[7], "/test.KitchenSink/SendMultipleValue", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleValueClient{stream}
	return x, nil
}

type KitchenSink_SendMultipleValueClient interface {
	Send(*_struct.Value) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleValueClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleValueClient) Send(m *_struct.Value) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleValueClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleListValue(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleListValueClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[8], "/test.KitchenSink/SendMultipleListValue", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleListValueClient{stream}
	return x, nil
}

type KitchenSink_SendMultipleListValueClient interface {
	Send(*_struct.ListValue) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleListValueClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleListValueClient) Send(m *_struct.ListValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleListValueClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleBytes(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleBytesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[9], "/test.KitchenSink/SendMultipleBytes", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleBytesClient{stream}
	return x, nil
}

type KitchenSink_SendMultipleBytesClient interface {
	Send(*wrappers.BytesValue) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleBytesClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleBytesClient) Send(m *wrappers.BytesValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleBytesClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleString(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleStringClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[10], "/test.KitchenSink/SendMultipleString", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleStringClient{stream}
	return x, nil
}

type KitchenSink_SendMultipleStringClient interface {
	Send(*wrappers.StringValue) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleStringClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleStringClient) Send(m *wrappers.StringValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleStringClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleBool(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleBoolClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[11], "/test.KitchenSink/SendMultipleBool", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleBoolClient{stream}
	return x, nil
}

type KitchenSink_SendMultipleBoolClient interface {
	Send(*wrappers.BoolValue) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleBoolClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleBoolClient) Send(m *wrappers.BoolValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleBoolClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleDouble(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleDoubleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[12], "/test.KitchenSink/SendMultipleDouble", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleDoubleClient{stream}
	return x, nil
}

type KitchenSink_SendMultipleDoubleClient interface {
	Send(*wrappers.DoubleValue) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleDoubleClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleDoubleClient) Send(m *wrappers.DoubleValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleDoubleClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleFloat(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleFloatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[13], "/test.KitchenSink/SendMultipleFloat", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleFloatClient{stream}
	return x, nil
}

type KitchenSink_SendMultipleFloatClient interface {
	Send(*wrappers.FloatValue) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleFloatClient struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleFloatClient) Send(m *wrappers.FloatValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleFloatClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleInt32(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleInt32Client, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[14], "/test.KitchenSink/SendMultipleInt32", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleInt32Client{stream}
	return x, nil
}

type KitchenSink_SendMultipleInt32Client interface {
	Send(*wrappers.Int32Value) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleInt32Client struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleInt32Client) Send(m *wrappers.Int32Value) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleInt32Client) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleInt64(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleInt64Client, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[15], "/test.KitchenSink/SendMultipleInt64", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleInt64Client{stream}
	return x, nil
}

type KitchenSink_SendMultipleInt64Client interface {
	Send(*wrappers.Int64Value) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleInt64Client struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleInt64Client) Send(m *wrappers.Int64Value) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleInt64Client) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleUInt32(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleUInt32Client, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[16], "/test.KitchenSink/SendMultipleUInt32", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleUInt32Client{stream}
	return x, nil
}

type KitchenSink_SendMultipleUInt32Client interface {
	Send(*wrappers.UInt32Value) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleUInt32Client struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleUInt32Client) Send(m *wrappers.UInt32Value) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleUInt32Client) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kitchenSinkClient) SendMultipleUInt64(ctx context.Context, opts ...grpc.CallOption) (KitchenSink_SendMultipleUInt64Client, error) {
	stream, err := c.cc.NewStream(ctx, &_KitchenSink_serviceDesc.Streams[17], "/test.KitchenSink/SendMultipleUInt64", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitchenSinkSendMultipleUInt64Client{stream}
	return x, nil
}

type KitchenSink_SendMultipleUInt64Client interface {
	Send(*wrappers.UInt64Value) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kitchenSinkSendMultipleUInt64Client struct {
	grpc.ClientStream
}

func (x *kitchenSinkSendMultipleUInt64Client) Send(m *wrappers.UInt64Value) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleUInt64Client) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KitchenSinkServer is the server API for KitchenSink service.
type KitchenSinkServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	Exchange(context.Context, *TestMessage) (*TestMessage, error)
	UploadMany(KitchenSink_UploadManyServer) error
	DownloadMany(*TestMessage, KitchenSink_DownloadManyServer) error
	DoManyThings(KitchenSink_DoManyThingsServer) error
	SendTimestamp(context.Context, *timestamp.Timestamp) (*empty.Empty, error)
	SendDuration(context.Context, *duration.Duration) (*empty.Empty, error)
	SendAny(context.Context, *any.Any) (*empty.Empty, error)
	SendStruct(context.Context, *_struct.Struct) (*empty.Empty, error)
	SendValue(context.Context, *_struct.Value) (*empty.Empty, error)
	SendListValue(context.Context, *_struct.ListValue) (*empty.Empty, error)
	SendBytes(context.Context, *wrappers.BytesValue) (*empty.Empty, error)
	SendString(context.Context, *wrappers.StringValue) (*empty.Empty, error)
	SendBool(context.Context, *wrappers.BoolValue) (*empty.Empty, error)
	SendDouble(context.Context, *wrappers.DoubleValue) (*empty.Empty, error)
	SendFloat(context.Context, *wrappers.FloatValue) (*empty.Empty, error)
	SendInt32(context.Context, *wrappers.Int32Value) (*empty.Empty, error)
	SendInt64(context.Context, *wrappers.Int64Value) (*empty.Empty, error)
	SendUInt32(context.Context, *wrappers.UInt32Value) (*empty.Empty, error)
	SendUInt64(context.Context, *wrappers.UInt64Value) (*empty.Empty, error)
	SendMultipleTimestamp(KitchenSink_SendMultipleTimestampServer) error
	SendMultipleDuration(KitchenSink_SendMultipleDurationServer) error
	SendMultipleAny(KitchenSink_SendMultipleAnyServer) error
	SendMultipleStruct(KitchenSink_SendMultipleStructServer) error
	SendMultipleValue(KitchenSink_SendMultipleValueServer) error
	SendMultipleListValue(KitchenSink_SendMultipleListValueServer) error
	SendMultipleBytes(KitchenSink_SendMultipleBytesServer) error
	SendMultipleString(KitchenSink_SendMultipleStringServer) error
	SendMultipleBool(KitchenSink_SendMultipleBoolServer) error
	SendMultipleDouble(KitchenSink_SendMultipleDoubleServer) error
	SendMultipleFloat(KitchenSink_SendMultipleFloatServer) error
	SendMultipleInt32(KitchenSink_SendMultipleInt32Server) error
	SendMultipleInt64(KitchenSink_SendMultipleInt64Server) error
	SendMultipleUInt32(KitchenSink_SendMultipleUInt32Server) error
	SendMultipleUInt64(KitchenSink_SendMultipleUInt64Server) error
}

// UnimplementedKitchenSinkServer can be embedded to have forward compatible implementations.
type UnimplementedKitchenSinkServer struct {
}

func (*UnimplementedKitchenSinkServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedKitchenSinkServer) Exchange(ctx context.Context, req *TestMessage) (*TestMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (*UnimplementedKitchenSinkServer) UploadMany(srv KitchenSink_UploadManyServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadMany not implemented")
}
func (*UnimplementedKitchenSinkServer) DownloadMany(req *TestMessage, srv KitchenSink_DownloadManyServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadMany not implemented")
}
func (*UnimplementedKitchenSinkServer) DoManyThings(srv KitchenSink_DoManyThingsServer) error {
	return status.Errorf(codes.Unimplemented, "method DoManyThings not implemented")
}
func (*UnimplementedKitchenSinkServer) SendTimestamp(ctx context.Context, req *timestamp.Timestamp) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTimestamp not implemented")
}
func (*UnimplementedKitchenSinkServer) SendDuration(ctx context.Context, req *duration.Duration) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDuration not implemented")
}
func (*UnimplementedKitchenSinkServer) SendAny(ctx context.Context, req *any.Any) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAny not implemented")
}
func (*UnimplementedKitchenSinkServer) SendStruct(ctx context.Context, req *_struct.Struct) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStruct not implemented")
}
func (*UnimplementedKitchenSinkServer) SendValue(ctx context.Context, req *_struct.Value) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendValue not implemented")
}
func (*UnimplementedKitchenSinkServer) SendListValue(ctx context.Context, req *_struct.ListValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendListValue not implemented")
}
func (*UnimplementedKitchenSinkServer) SendBytes(ctx context.Context, req *wrappers.BytesValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBytes not implemented")
}
func (*UnimplementedKitchenSinkServer) SendString(ctx context.Context, req *wrappers.StringValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendString not implemented")
}
func (*UnimplementedKitchenSinkServer) SendBool(ctx context.Context, req *wrappers.BoolValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBool not implemented")
}
func (*UnimplementedKitchenSinkServer) SendDouble(ctx context.Context, req *wrappers.DoubleValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDouble not implemented")
}
func (*UnimplementedKitchenSinkServer) SendFloat(ctx context.Context, req *wrappers.FloatValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFloat not implemented")
}
func (*UnimplementedKitchenSinkServer) SendInt32(ctx context.Context, req *wrappers.Int32Value) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInt32 not implemented")
}
func (*UnimplementedKitchenSinkServer) SendInt64(ctx context.Context, req *wrappers.Int64Value) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInt64 not implemented")
}
func (*UnimplementedKitchenSinkServer) SendUInt32(ctx context.Context, req *wrappers.UInt32Value) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUInt32 not implemented")
}
func (*UnimplementedKitchenSinkServer) SendUInt64(ctx context.Context, req *wrappers.UInt64Value) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUInt64 not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleTimestamp(srv KitchenSink_SendMultipleTimestampServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleTimestamp not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleDuration(srv KitchenSink_SendMultipleDurationServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleDuration not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleAny(srv KitchenSink_SendMultipleAnyServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleAny not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleStruct(srv KitchenSink_SendMultipleStructServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleStruct not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleValue(srv KitchenSink_SendMultipleValueServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleValue not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleListValue(srv KitchenSink_SendMultipleListValueServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleListValue not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleBytes(srv KitchenSink_SendMultipleBytesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleBytes not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleString(srv KitchenSink_SendMultipleStringServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleString not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleBool(srv KitchenSink_SendMultipleBoolServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleBool not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleDouble(srv KitchenSink_SendMultipleDoubleServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleDouble not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleFloat(srv KitchenSink_SendMultipleFloatServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleFloat not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleInt32(srv KitchenSink_SendMultipleInt32Server) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleInt32 not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleInt64(srv KitchenSink_SendMultipleInt64Server) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleInt64 not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleUInt32(srv KitchenSink_SendMultipleUInt32Server) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleUInt32 not implemented")
}
func (*UnimplementedKitchenSinkServer) SendMultipleUInt64(srv KitchenSink_SendMultipleUInt64Server) error {
	return status.Errorf(codes.Unimplemented, "method SendMultipleUInt64 not implemented")
}

func RegisterKitchenSinkServer(s *grpc.Server, srv KitchenSinkServer) {
	s.RegisterService(&_KitchenSink_serviceDesc, srv)
}

func _KitchenSink_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/Exchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).Exchange(ctx, req.(*TestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_UploadMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).UploadMany(&kitchenSinkUploadManyServer{stream})
}

type KitchenSink_UploadManyServer interface {
	SendAndClose(*TestMessage) error
	Recv() (*TestMessage, error)
	grpc.ServerStream
}

type kitchenSinkUploadManyServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkUploadManyServer) SendAndClose(m *TestMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkUploadManyServer) Recv() (*TestMessage, error) {
	m := new(TestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_DownloadMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KitchenSinkServer).DownloadMany(m, &kitchenSinkDownloadManyServer{stream})
}

type KitchenSink_DownloadManyServer interface {
	Send(*TestMessage) error
	grpc.ServerStream
}

type kitchenSinkDownloadManyServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkDownloadManyServer) Send(m *TestMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _KitchenSink_DoManyThings_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).DoManyThings(&kitchenSinkDoManyThingsServer{stream})
}

type KitchenSink_DoManyThingsServer interface {
	Send(*TestMessage) error
	Recv() (*TestMessage, error)
	grpc.ServerStream
}

type kitchenSinkDoManyThingsServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkDoManyThingsServer) Send(m *TestMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkDoManyThingsServer) Recv() (*TestMessage, error) {
	m := new(TestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamp.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendTimestamp(ctx, req.(*timestamp.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(duration.Duration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendDuration(ctx, req.(*duration.Duration))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendAny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(any.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendAny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendAny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendAny(ctx, req.(*any.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_struct.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendStruct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendStruct(ctx, req.(*_struct.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_struct.Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendValue(ctx, req.(*_struct.Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendListValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_struct.ListValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendListValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendListValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendListValue(ctx, req.(*_struct.ListValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.BytesValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendBytes(ctx, req.(*wrappers.BytesValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendString(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendBool(ctx, req.(*wrappers.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendDouble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.DoubleValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendDouble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendDouble",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendDouble(ctx, req.(*wrappers.DoubleValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.FloatValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendFloat(ctx, req.(*wrappers.FloatValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendInt32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendInt32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendInt32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendInt32(ctx, req.(*wrappers.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendInt64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendInt64(ctx, req.(*wrappers.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendUInt32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.UInt32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendUInt32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendUInt32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendUInt32(ctx, req.(*wrappers.UInt32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendUInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenSinkServer).SendUInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.KitchenSink/SendUInt64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenSinkServer).SendUInt64(ctx, req.(*wrappers.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenSink_SendMultipleTimestamp_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleTimestamp(&kitchenSinkSendMultipleTimestampServer{stream})
}

type KitchenSink_SendMultipleTimestampServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*timestamp.Timestamp, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleTimestampServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleTimestampServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleTimestampServer) Recv() (*timestamp.Timestamp, error) {
	m := new(timestamp.Timestamp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleDuration_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleDuration(&kitchenSinkSendMultipleDurationServer{stream})
}

type KitchenSink_SendMultipleDurationServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*duration.Duration, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleDurationServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleDurationServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleDurationServer) Recv() (*duration.Duration, error) {
	m := new(duration.Duration)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleAny_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleAny(&kitchenSinkSendMultipleAnyServer{stream})
}

type KitchenSink_SendMultipleAnyServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*any.Any, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleAnyServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleAnyServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleAnyServer) Recv() (*any.Any, error) {
	m := new(any.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleStruct_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleStruct(&kitchenSinkSendMultipleStructServer{stream})
}

type KitchenSink_SendMultipleStructServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*_struct.Struct, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleStructServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleStructServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleStructServer) Recv() (*_struct.Struct, error) {
	m := new(_struct.Struct)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleValue_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleValue(&kitchenSinkSendMultipleValueServer{stream})
}

type KitchenSink_SendMultipleValueServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*_struct.Value, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleValueServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleValueServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleValueServer) Recv() (*_struct.Value, error) {
	m := new(_struct.Value)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleListValue_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleListValue(&kitchenSinkSendMultipleListValueServer{stream})
}

type KitchenSink_SendMultipleListValueServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*_struct.ListValue, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleListValueServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleListValueServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleListValueServer) Recv() (*_struct.ListValue, error) {
	m := new(_struct.ListValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleBytes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleBytes(&kitchenSinkSendMultipleBytesServer{stream})
}

type KitchenSink_SendMultipleBytesServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*wrappers.BytesValue, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleBytesServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleBytesServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleBytesServer) Recv() (*wrappers.BytesValue, error) {
	m := new(wrappers.BytesValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleString_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleString(&kitchenSinkSendMultipleStringServer{stream})
}

type KitchenSink_SendMultipleStringServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*wrappers.StringValue, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleStringServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleStringServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleStringServer) Recv() (*wrappers.StringValue, error) {
	m := new(wrappers.StringValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleBool_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleBool(&kitchenSinkSendMultipleBoolServer{stream})
}

type KitchenSink_SendMultipleBoolServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*wrappers.BoolValue, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleBoolServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleBoolServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleBoolServer) Recv() (*wrappers.BoolValue, error) {
	m := new(wrappers.BoolValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleDouble_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleDouble(&kitchenSinkSendMultipleDoubleServer{stream})
}

type KitchenSink_SendMultipleDoubleServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*wrappers.DoubleValue, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleDoubleServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleDoubleServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleDoubleServer) Recv() (*wrappers.DoubleValue, error) {
	m := new(wrappers.DoubleValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleFloat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleFloat(&kitchenSinkSendMultipleFloatServer{stream})
}

type KitchenSink_SendMultipleFloatServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*wrappers.FloatValue, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleFloatServer struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleFloatServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleFloatServer) Recv() (*wrappers.FloatValue, error) {
	m := new(wrappers.FloatValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleInt32_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleInt32(&kitchenSinkSendMultipleInt32Server{stream})
}

type KitchenSink_SendMultipleInt32Server interface {
	SendAndClose(*empty.Empty) error
	Recv() (*wrappers.Int32Value, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleInt32Server struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleInt32Server) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleInt32Server) Recv() (*wrappers.Int32Value, error) {
	m := new(wrappers.Int32Value)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleInt64_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleInt64(&kitchenSinkSendMultipleInt64Server{stream})
}

type KitchenSink_SendMultipleInt64Server interface {
	SendAndClose(*empty.Empty) error
	Recv() (*wrappers.Int64Value, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleInt64Server struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleInt64Server) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleInt64Server) Recv() (*wrappers.Int64Value, error) {
	m := new(wrappers.Int64Value)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleUInt32_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleUInt32(&kitchenSinkSendMultipleUInt32Server{stream})
}

type KitchenSink_SendMultipleUInt32Server interface {
	SendAndClose(*empty.Empty) error
	Recv() (*wrappers.UInt32Value, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleUInt32Server struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleUInt32Server) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleUInt32Server) Recv() (*wrappers.UInt32Value, error) {
	m := new(wrappers.UInt32Value)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KitchenSink_SendMultipleUInt64_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KitchenSinkServer).SendMultipleUInt64(&kitchenSinkSendMultipleUInt64Server{stream})
}

type KitchenSink_SendMultipleUInt64Server interface {
	SendAndClose(*empty.Empty) error
	Recv() (*wrappers.UInt64Value, error)
	grpc.ServerStream
}

type kitchenSinkSendMultipleUInt64Server struct {
	grpc.ServerStream
}

func (x *kitchenSinkSendMultipleUInt64Server) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kitchenSinkSendMultipleUInt64Server) Recv() (*wrappers.UInt64Value, error) {
	m := new(wrappers.UInt64Value)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _KitchenSink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.KitchenSink",
	HandlerType: (*KitchenSinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _KitchenSink_Ping_Handler,
		},
		{
			MethodName: "Exchange",
			Handler:    _KitchenSink_Exchange_Handler,
		},
		{
			MethodName: "SendTimestamp",
			Handler:    _KitchenSink_SendTimestamp_Handler,
		},
		{
			MethodName: "SendDuration",
			Handler:    _KitchenSink_SendDuration_Handler,
		},
		{
			MethodName: "SendAny",
			Handler:    _KitchenSink_SendAny_Handler,
		},
		{
			MethodName: "SendStruct",
			Handler:    _KitchenSink_SendStruct_Handler,
		},
		{
			MethodName: "SendValue",
			Handler:    _KitchenSink_SendValue_Handler,
		},
		{
			MethodName: "SendListValue",
			Handler:    _KitchenSink_SendListValue_Handler,
		},
		{
			MethodName: "SendBytes",
			Handler:    _KitchenSink_SendBytes_Handler,
		},
		{
			MethodName: "SendString",
			Handler:    _KitchenSink_SendString_Handler,
		},
		{
			MethodName: "SendBool",
			Handler:    _KitchenSink_SendBool_Handler,
		},
		{
			MethodName: "SendDouble",
			Handler:    _KitchenSink_SendDouble_Handler,
		},
		{
			MethodName: "SendFloat",
			Handler:    _KitchenSink_SendFloat_Handler,
		},
		{
			MethodName: "SendInt32",
			Handler:    _KitchenSink_SendInt32_Handler,
		},
		{
			MethodName: "SendInt64",
			Handler:    _KitchenSink_SendInt64_Handler,
		},
		{
			MethodName: "SendUInt32",
			Handler:    _KitchenSink_SendUInt32_Handler,
		},
		{
			MethodName: "SendUInt64",
			Handler:    _KitchenSink_SendUInt64_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadMany",
			Handler:       _KitchenSink_UploadMany_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadMany",
			Handler:       _KitchenSink_DownloadMany_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DoManyThings",
			Handler:       _KitchenSink_DoManyThings_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleTimestamp",
			Handler:       _KitchenSink_SendMultipleTimestamp_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleDuration",
			Handler:       _KitchenSink_SendMultipleDuration_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleAny",
			Handler:       _KitchenSink_SendMultipleAny_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleStruct",
			Handler:       _KitchenSink_SendMultipleStruct_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleValue",
			Handler:       _KitchenSink_SendMultipleValue_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleListValue",
			Handler:       _KitchenSink_SendMultipleListValue_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleBytes",
			Handler:       _KitchenSink_SendMultipleBytes_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleString",
			Handler:       _KitchenSink_SendMultipleString_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleBool",
			Handler:       _KitchenSink_SendMultipleBool_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleDouble",
			Handler:       _KitchenSink_SendMultipleDouble_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleFloat",
			Handler:       _KitchenSink_SendMultipleFloat_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleInt32",
			Handler:       _KitchenSink_SendMultipleInt32_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleInt64",
			Handler:       _KitchenSink_SendMultipleInt64_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleUInt32",
			Handler:       _KitchenSink_SendMultipleUInt32_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMultipleUInt64",
			Handler:       _KitchenSink_SendMultipleUInt64_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
